---
title: Changing MySQL Server Defaults
owner: MySQL
---

This topic provides instructions for developers to set optional parameters to change the MySQL for Pivotal Cloud Foundry (PCF) 
server defaults. Use this topic if your apps have a read-heavy or write-heavy workload, or if you need to use lowercase table names. 

These procedures use the Cloud Foundry Command Line Interface 
([cf CLI](https://docs.pivotal.io/pivotalcf/1-12/devguide/services/managing-services.html)). 
You can also use [Apps Manager](http://docs.pivotal.io/pivotalcf/console/dev-console.html) to perform the same tasks using a graphical UI.

For general information about using MySQL for PCF, see [Using MySQL for PCF](./use.html).

## <a id="configuring"></a>Optional Parameters for the MySQL for PCF Service Instances

MySQL for PCF service instances are configured by default with industry best practices. For more
specific use cases, you can customize the following parameters:

| Key | Type | Default | Description |
| ---- | ---- | ---- | ---- |
| `workload` | String | `mixed`| You can set this to `read-heavy`, `mixed`, or `write-heavy`. 
For more information, see [Understanding Workload Types](#workload). |
| `enable_lower_case_table_names` | Boolean | `false` | You can only set this when creating a service instance. 
If you set this to `true`, table names are stored in lowercase. For more information, see [Understanding Lowercase Table Names](#lowercase).  |

## <a id="parameters"></a> Use Optional Parameters

You can change these default configuration parameters using the cf CLI as follows:

* `workload`---When creating a new instance, or updating an existing one
* `enable_lower_case_table_names`---When creating a new instance 

### <a id="creating"></a> Change Default Parameters when Creating a Service Instance

To create a service instance using optional parameters use the following command:

`cf create-service SERVICE SERVICE-PLAN SERVICE-INSTANCE -c '{ "PARAMETER": "PARAMETER-VALUE" }'`


The `-c` flag accepts a valid JSON object containing service-specific configuration parameters,
provided either in-line or in a file.


For example:
<pre class="terminal">
$ cf create-service p.mysql db-small myDB -c '{ "workload": "mixed" }'
Creating service instance myDB in org system / space system as admin...
OK<br />
Create in progress. Use 'cf services' or 'cf service myDB' to check operation status.</pre>


If you get an error using optional parameters, see [Troubleshooting Instances](./troubleshoot-instances.html).

### <a id="updating"></a> Change Default Parameters on an Existing Service Instance

To change the default parameters of an existing instance use the following command:

`cf update-service SERVICE SERVICE-PLAN SERVICE-INSTANCE -c '{ "PARAMETER": "PARAMETER-VALUE" }'`


The `-c` flag accepts a valid JSON object containing service-specific configuration parameters,
provided either in-line or in a file.

For example:

<pre class="terminal">
$ cf update-service p.mysql db-small myDB -c '{ "workload": "mixed" }'
</pre>


If you get an error using optional parameters, see [Troubleshooting Instances](./troubleshoot-instances.html).

## <a id='workload'></a> Understanding Workload Types

MySQL for PCF offers three workload profiles that developers can use to configure MySQL instances based on their 
specific app workloads. For instructions on changing configuration options, see [Use Optional Parameters](#parameters).

<table class="nice">
	<th>Profile</th><th>Description</th>
	<tr>
		<td>Mixed Workload</td>
		<td>By default, each MySQL service instance is configured for a mixed workload, 
			that is, a  workload that is equally heavy on reads and writes. 
			The configuration for this profile is described in detail in <a href="./server-defaults.html">MySQL Server Defaults</a>.</td>
	</tr>
	<tr>
		<td>Read-Heavy Workload</td>
		<td>For apps that have a large number of reads, the service instance can be configured for a read-heavy workload. 
			The read-heavy profile changes these two properties from 
			the <a href="./server-defaults.html">MySQL Server Defaults</a>:

<ul>
<li><code>innodb_buffer_pool_sizd</code> is increased to <code>75%</code> of the MySQL VM's memory</li>
<li><code>innodb_flush_methdo</code> is set to <code>O_DIRECT</code></li>
</ul>

	<tr>
		<td>Write-Heavy Workload</td>
		<td>For apps that write to the database a lot, the service instance can be configured for 
			a write-heavy workload. The write-heavy profile changes these four properties from 
			the <a href="./server-defaults.html">MySQL Server Defaults</a>:
<ul>
<li><code>innodb_buffer_pool_sizd</code> is increased to <code>75%</code> of the MySQL VM's memory</li>
<li><code>innodb_flush_methdo</code> is set to <code>O_DIRECT</code></li>
<li><code>innodb_log_file_size</code> is increased to <code>1GB</code></li>
<li><code>max_allowed_packets</code> is increased to <code>1GB</code></li>
</ul>
</table> 

## <a id="lowercase"></a> Understanding Lowercase Table Names

If you are migrating a database from a system that was case insensitive, 
			that is, where `TableName` is the same as `TABLEname`, then forcing lowercase turns both into `tablename`. 
			In this way both names are interpreted as the same table. 

For more information, see the MySQL [documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_lower_case_table_names).



