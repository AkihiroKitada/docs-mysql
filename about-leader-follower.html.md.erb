---
title: About Leader-Follower
owner: MySQL
---

This topic contains information to help you decide whether to enable leader-follower availability for your MySQL databases.

## <a id="topology"></a>Increasing Availability with Leader-Follower

A leader-follower database is used to increase the availability of your database by enabling operators to
[failover](#failover) and send application traffic to the follower. The term leader-follower
is analogous to master-slave.

When a developer creates a leader-follower service instance,
the on-demand broker deploys two MySQL VMs in two separate availability zones (AZs).
Any data that is written to the leader is asynchronously replicated to the follower.

The follower VM is only for increasing availability
and is not exposed to developers to increase read throughput.
Developers can increase read throughput by configuring `workload` profiles.
For more information, see [Provide Optional Parameters](./change-default.html#optional-param).

## <a id="failover"></a>Understanding Failover

MySQL for PCF focuses on data consistency above all else and relies on operators
to trigger a failover. MySQL for PCF does not automatically failover to the follower.
When an operator triggers a failover, application traffic is sent to the standby follower.

Along with simple steps for failover, MySQL offers a set of metrics that can be used to monitor
leader-follower instances and determine when a failover should be triggered. For instructions on
how to trigger a failover, see [Trigger a Failover](./maintain-leader-follower.html#failover).

## <a id="iaas"></a> Infrastructure Requirements for Leader-Follower Deployments

Leader-follower instances have additional infrastructure requirements to previous singleton instances, as described below.

### Capacity Planning

When calculating IaaS usage, you must take into account that each leader-follower instance requires two VMs. Therefore, the resources used
for a leader-follower-enabled plan must be doubled.
For more information, [Resource Usage Planning for On-Demand Plans](./recommended.html#resources).

### Availability Zones

To minimize impact of an AZ outage and to remove single points of failure, Pivotal recommends that you
provision three AZs if using leader-follower deployments. With three AZs, the MySQL VMs
are deployed to two AZs, and the broker is deployed to a third.

### Networking Rules

In addition to the [standard networking rules](./about.html#rules) needed for MySQL for PCF,
the operator must ensure leader-follower-specific network rules are also set up as follows:

- Leader-follower VMs bidirectionally communicate with each other over port 8008 for orchestration.
- Leader-follower VMs bidirectionally communicate with each other over port 3306 for replication.

For information about how to set leader-follower communication, see [Set up Leader-Follower Communication](./maintain-leader-follower.html#communication).

## <a id="errands"></a> Leader Follower Orchestration
MySQL for PCF automates orchestrating the standard lifecycle of creating, updating, and deleting leader-follower service
instances. However, there are times where an operator may need to intervene and change the topology, such as an unexpected
outage.

For such events, MySQL for PCF provides operates with several discrete building blocks that can be used to orchestrate failovers. The
building blocks are designed so a PCF operator can easily control the lifecycle of a service instance without being an
expert at MySQL.

The building blocks are provided as errands on each leader follower service instance.

- **configure-leader-follower**
  This errand configures replication on the follower and ensures the leader is writable.
  It runs after every create or update of a leader follower instance.
  The errand will fail and alert operators, via bosh errand output, if the service instance is in bad state.
- **make-leader**
  This errand is used to promote a follower VM to a leader. It removes replication configuration from a follower VM,
  waits for all transactions to be applied to the VM, and sets the VM as writable. The errand will fail if the original
  leader is still accessible to protect against data divergence.
- **make-read-only**
  This errand is used to [fence the leader](https://en.wikipedia.org/wiki/Fencing_(computing)) if it is still accessible.
  It sets the VM to read only, ensures that if the follower is accessible, all transactions have been relayed to the follower.

Using the errands above, an operator can create failover scripts as described in the
[Maintaining Availability with Leader-Follower](./maintain-leader-follower.html) page.
