---
title: Backing Up and Restoring On-Demand MySQL
owner: MySQL
---

<style>
    .note.warning {
        background-color: #fdd;
        border-color: #fbb
    }

    .note.warning:before {
        color: #f99;
     }
</style>

This topic describes how to enable and configure automated backups for the MySQL for Pivotal Cloud Foundry (PCF) service, and how to manually restore a MySQL service instance from a backup.

## <a id="overview"></a>Overview ##

Automated backups do the following:

- Periodically create and upload backup artifacts suitable for restoring all of the databases used by the service instance.
- Operate without locking apps out of the database; no downtime.
- Include a metadata file that contains the critical details of the backup artifact, including the effective calendar time of the backup.
- Encrypt backup artifacts within the MySQL for PCF VM; unencrypted data is never transported outside of the MySQL for PCF deployment.

## <a id="enable-backups"></a>Enable Automated Backups ##

You can configure MySQL for PCF to automatically back up its databases to external storage.

* **How and Where**: MySQL for PCF runs an [S3](https://aws.amazon.com/documentation/s3/) client that saves backups to an Amazon S3 bucket, [Ceph](http://docs.ceph.com/docs/master/) storage cluster, or other S3-compatible endpoint certified by Pivotal.

* **When**: Backups follow a schedule that you specify with a [cron](http://godoc.org/github.com/robfig/cron) expression.

* **What**: Back up the entire MySQL data directory, consistent to a specific point in time.

Follow the procedures below to enable and configure automated backups.

### <a id="access-key"></a> Create a Policy and Access Key 

MySQL for PCF accesses your S3 store through a user account. Pivotal recommends that this account be solely for MySQL for PCF. You need to apply a minimal policy that lets the user account upload backup artifacts to your S3 store.

1. Create a policy for your MySQL for PCF user account. Policy creation varies across S3 providers, but MySQL for PCF needs to list and upload to buckets. To use buckets that do not already exist, it additionally needs to create buckets.

For example, in AWS create a new custom policy (**IAM** > **Policies** > **Create Policy** > **Create Your Own Policy**) and paste in the following permissions:

```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "ServiceBackupPolicy",
      "Effect": "Allow",
      "Action": [
        "s3:ListBucket",
        "s3:ListBucketMultipartUploads",
        "s3:ListMultipartUploadParts",
        "s3:CreateBucket",
        "s3:PutObject"
      ],
      "Resource": [
        "arn:aws:s3:::MY_BUCKET_NAME/*",
        "arn:aws:s3:::MY_BUCKET_NAME"
      ]
    }
  ]
}
```

1. (Recommended) Create a new user for MySQL for PCF and record its Access Key ID and Secret Access Key, the user credentials.

1. Attach this policy to your AWS user (**IAM** > **Policies** > **Policy Actions** > **Attach**).


### <a id="configure"></a> Configure in Ops Manager

Use Ops Manager to connect MySQL for PCF to your S3 account.

1. In Ops Manager, open the MySQL for PCF tile > **Backups** pane.

1. Select the **Ceph or Amazon S3** radio button.

  ![S3 Backup Configuration Form](images/S3-backups.png)

Fill in the fields as follows:

  * **Access Key ID** and **Secret Access Key** 
      Enter the S3 Access Key ID and Secret Access Key from above.
  * **Endpoint URL**
      Enter the S3 compatible endpoint URL for uploading backups. URL must start with `http://` or `https://`. The default is https://s3.amazonaws.com
  * **Bucket Name**
      Enter the bucket name in which to upload.
  * **Bucket Path**
      Enter the path in the bucket to store backups.
  * **Cron Schedule**
          Enter a `cron` schedule, using standard [cron syntax](https://help.ubuntu.com/community/CronHowto), to take backups of each service instance.
</table>

## <a id="disable-backups"></a>Disable Automated Backups ##

To disable automated backups, perform the following steps:

1. Navigate to the MySQL for Pivotal Cloud Foundry tile on the Ops Manager Installation Dashboard.

1. Click **Backups**.

  ![Disable Backups](images/disable-backups.png)

1. On the **Backups** form, click **Disable Backups**.

1. Click **Save**.

1. Return to the Ops Manager Installation Dashboard and click **Apply Changes**.

To configure automated backups for MySQL for PCF, perform the following steps:

1. Navigate to the MySQL for Pivotal Cloud Foundry tile on the Ops Manager Installation Dashboard.
1. Click **Backups**.

## <a id="understanding-metadata"></a>Understand Backup Metadata ##

Along with each release, MySQL for PCF will upload a `mysql-backup-XXXXXXXXXX.txt` metadata file.

The contents of the metadata file resemble the following:

```
ibbackup_version = 2.4.5
end_time = 2017-04-24 21:00:03
lock_time = 0
binlog_pos =
incremental = N
encrypted = N
server_version = 5.7.16-10-log
start_time = 2017-04-24 21:00:00
tool_command = --user=admin --password=... --stream=tar tmp/
innodb_from_lsn = 0
innodb_to_lsn = 2491844
format = tar
compact = N
name =
tool_name = innobackupex
partial = N
compressed = N
uuid = fd13cf26-2930-11e7-871e-42010a000807
tool_version = 2.4.5
```

Within this file, the most important items are the `start_time` and the `server_version` entries. Transactions that have not been completed at the start of the backup effort will not be present in the restored artifact.

<p class="note"><strong>Note</strong>: Both <code>compressed</code> and <code>encrypted</code> show as <code>N</code> in this file, yet the artifact uploaded by MySQL for PCF is both compressed and encrypted. This is a known bug.</p>

## <a id="restore"></a> Restore a Backup Artifact

The disaster recovery backups feature of MySQL for PCF is primarily intended as a way to recover data to the same PCF foundation from which the data was backed up. This process replaces 100% of the data and state of a running MySQL for PCF service instance.

The process to restore a backup artifact to a MySQL for PCF service instance is entirely manual. Perform the following steps to use the offsite backups to restore your cluster to its previous state:

### Downloading the Backup Artifact

These instructions assume that you are using AWS S3 as your backup destination.

1. Determine the guid associated with the service instance that you want to restore
 <pre class="terminal">
  $ cf service my-instance --guid
  b3a30744-52cd-4bf2-b417-3f1c2aec1304
 </pre>

1. Download the manifest for the service instance deployment using the guid from above:
  <pre class="terminal">
   $ bosh download manifest service-instance_b3a30744-52cd-4bf2-b417-3f1c2aec1304 ./manifest.yml
  </pre>
  <p class="note">Follow the instructions for logging into BOSH in the Ops Manager VM. http://docs.pivotal.io/pivotalcf/1-10/customizing/trouble-advanced.html</p>

1. Inspect the downloaded manifest and take note of the `properties.cf-mysql-backup.symmetric_key` and backup destination bucket. You will need this later to decrypt the backup

1. Login to AWS via the console or using the AWS cli. List the available backups for the instance:
 <pre class="terminal">
  $ aws s3 ls --recursive s3://BUCKET_NAME/service-instance_b3a30744-52cd-4bf2-b417-3f1c2aec1304
 </pre>

1. Choose the most recent backup. The backups artifacts are timestamped in the filename and have a `.gpg` extension.

1. Download the selected backup:
 <pre class="terminal">
  $ aws s3 cp s3://$BUCKET_NAME/$BUCKET_PATH/YEAR/MONTH/DATE/mysql-backup-1489168980-0.tar.gpg ./a-local-path/mysql-backup-1489168980-0.tar.gpg
 </pre>

### Restoring a Backup

These instructions assume you have a backup artifact downloaded. It provides steps of restoring to a new service instance.

1. [Create a new service instance](./use.html#create) to restore to
 ```
  $ cf create-service p.mysql db-small NEW_SERVICE_INSTANCE
 ```

1. Prepare the service instance for restoration:
  1. Determine the guid associated with your service instance:
   ```
    $ cf service NEW_SERVICE_INSTANCE --guid
   ```

  1. Download the manifest for the service instance deployment using the guid from above:
   ```
    $ bosh download manifest service-instance_GUID ./manifest.yml
   ```

  1. Set the bosh deployment to new downloaded manifest
    ```
     $ bosh deployment ./manifest.yml
    ```

  1. Use the [BOSH CLI to ssh](http://docs.pivotal.io/pivotalcf/1-10/customizing/trouble-advanced.html#bosh-ssh) to the newly created MySQL service instance.
   ```
    $ bosh ssh mysql
   ```

  1. After ssh'ing onto the mysql VM become root
   ```
    $ sudo su
   ```

  1. Stop all currently running processes
   ```
    $ monit stop all
   ```

  1. Wait until all jobs have successfully halted. They will be listed as "not monitored":
   ```
    $ watch monit summary
   ```

  1. Delete the existing mysql database which is stored on disk:
   ```
    $ rm -rf /var/vcap/store/mysql/data/*
   ```
   <p class="note warning">This is a destructive action and should only be run on a new and unused service instance.</p>

  1. Exit the mysql VM

1. Restore the backup artifact to the service instance:
  1. Copy the downloaded backup artifact to the new service instance:
    ```
     $ bosh scp mysql-backup-TIMESTAMP.tar.gpg <bosh_instance>:<destination_path>
    ```
     - `bosh_instance` should be set to `mysql/instance-id`, for example: `mysql/d7ff8d46-c3e8-449f-aea7-5a05b0a1929c`
     - `destination_path` should be the destination to send the backup to on the bosh VM, for example: `/tmp/`

  1. Use the [BOSH CLI to ssh](http://docs.pivotal.io/pivotalcf/1-10/customizing/trouble-advanced.html#bosh-ssh) to the newly created MySQL service instance.
    ```
     $ bosh ssh mysql
    ```

  1. After ssh'ing onto the mysql VM become root
   ```
    $ sudo su
   ```

  1. Use the gpg descryption passphrase from above to descrypt the backup. You will be proprted for the decryption passphrase.
    ```
     $ gpg --decrypt /tmp/mysql-backup.tar.gpg > /tmp/mysql-backup.tar
    ```

  1. Expand the backup artifact into the data directory for the MySQL server:
    ```
     $ tar xvf /tmp/mysql-backup.tar --directory=/var/vcap/store/mysql/data/
    ```

  1. Modify the data directory owner to `vcap` or the mysql server cannot access the data.
    ```
     $ chown -R vcap:vcap /var/vcap/store/mysql
    ```

  1. Restart the BOSH jobs to resume the MySQL server
    ```
     $ monit start all
    ```

  1. Use monit to ensure all processes start successfully; all processes should be listed as `running`
    ```
     $ watch monit summary
    ```

  1. Delete old service binding created users. User tables get backed up along with databases, so any users that existed
     in the backup are transferred over during restoration. To secure the database, determine and delete all users
     that have randomly generated usernames:
     <pre class="terminal">
      $ /var/vcap/packages/percona-server/bin/mysql -uadmin -p
      <br />
      mysql> select USER from mysql.user;
      +----------------------------------+
      | USER                             |
      +----------------------------------+
      | 9b930c5813e049ca863b4acbf4000a8c |
      | admin                            |
      | e82b9b479bf64eb5854c93065810c95b |
      | mysql.sys                        |
      +----------------------------------+
      4 rows in set (0.00 sec)
      <br />
      mysql> drop user 9b930c5813e049ca863b4acbf4000a8c;
      <br />
      mysql> drop user e82b9b479bf64eb5854c93065810c95b;
     </pre>

  1. Exit the mysql VM

1. Update your CF application to bind to the new service instance
  ```
   $ cf bind-service my-app NEW_SERVICE_INSTANCE
  ```

1. Start your CF application
  ```
   $ cf start my-app
  ```

1. At this point your application should be running and the restored data accessible to it.
