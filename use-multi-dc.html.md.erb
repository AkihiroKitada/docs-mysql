---
title: Using MySQL for PCF Across Multiple Foundations 
owner: MySQL
---
This topic ...

## <a id="overview"> </a>Overview 

MySQL for PCF allows developers to deploy Leader-Follower instances across multiple PCF foundations. The Operator can configure these foundations to be in the same data center, or spread across multiple data centers. This is useful for the following use cases:

* Active-Passive Disaster Recovery strategy
* Active-Active Disaster Recovery strategy
* Off-Platform Access
  
For more information about the above multi-foundation architectures, see []().

### Terminology

* Primary Foundation
* Secondary Foundation
* Leader
* Follower
* Service Instance (repurposed): it's technically two cloud foundry service instances spread across multiple foundations, but since it serves a single purpose, we shall refer to a multi-foundation leader-follower as a single "service instance".
* Topology
* Decoupled Leader-Follower: Customers can use the `pxc-single-node` plan to set up leader-follower as separate BOSH deployments. This allows them to spread the L-F across orgs/spaces, foundations, and/or data centers.

## <a id='create-multi-dc'></a>Set up a Leader-Follower Across Multiple Foundations

To set up a Leader-Follower service instance of MySQL for PCF across multiple foundations, do the following:

1. Create a service instance of topology `pxc-single-node` in your **primary** foundation by doing the following:
    
    1. Log into the PCF deployment for your primary foundation by running the following command:
      
        ```
        cf login PRIMARY-API-URL
        ```
        Where `PRIMARY-API-URL` is the API endpoint for the primary foundation. 

    1. Create a service instance of topology `pxc-single-node` by running the following command:

        ```
        cf create-service p.mysql PLAN SERVICE-INSTANCE
        ```

        Where:
        - `PLAN` is the name of the MySQL for PCF PXC single node plan you want to use.
        - `SERVICE-INSTANCE` is a name you choose to identify the service instance.
        This name appears under `service` in output from `cf services`. 
        
        **Note**: Don't name it `leader` because it will get confusing when you fail over.

    1. (Optional) Watch the progress of the service instance creation by entering the following command and wait for the `last operation` for
    your instance to show as `create succeeded`.

        ```
        watch cf services
        ```

        For example:

        <pre class="terminal">$ cf create-service p.mysql db-small primary-node<br>
        Creating service primary-node in org my-org / space my-space as user<span>@</span>example.com...
        OK<br>
       $ watch cf services<br>
        Getting services in org my-org / space my-space as user<span>@</span>example.com...
        OK
        name           service       plan        bound apps    last operation
        primary-node   p.mysql       db-small                  create succeeded
      </pre>

    If you get an error, see [Troubleshooting Instances](./troubleshoot-instances.html).

1. Create a service instance of topology `pxc-single-node` in your **secondary** foundation by repeating the above step, replacing references to **PRIMARY** with **SECONDARY**. 

**The following steps assume that you will set up the leader instance as the `primary-node` in the primary foundation, and the follower instance as the `follower-node` in the secondary foundation.**
    
1. Create a service key for the follower service instance in your secondary foundation by running the following command:

    ```
    cf create-service-key FOLLOWER-INSTANCE SERVICE-KEY-NAME -c '{"replication-request": "host-info"}
    ```
    Where: 
    + `FOLLOWER-INSTANCE` is name of the follower service instance you created in step 1b above. 
    + `SERVICE-KEY-NAME` is a name you choose for the service key. 
    
    **Note**: This is a special service key that should only be used for establishing replication between a decoupled leader-follower instance.
    
1. View the `replication-credentials` for your follower service key by running the following command:

    ```
    cf service-key FOLLOWER-INSTANCE SERVICE-KEY-NAME
    ```
    Where: 
    + `FOLLOWER-INSTANCE` is the name of the follower service instance you created in step 1b above. 
    + `SERVICE-KEY-NAME` is the name of the follower service key you created in step 3 above. 
    
    For example:
    
    <pre class="terminal">$ cf service-key my-follower rep-key
      Getting key rep-key for service instance my-follower as user@example.com...

      {
        "replication-credentials": {
          "hostname": "FOLLOWER.bosh",
          "ip": "FOLLOWER_IP",
          "uuid": "ab12cd34-5678-91e2-345f-67891h234567"
        }
      }</pre>
1. Record the output of the above command.
1. Log into the PCF deployment for your leader service instance by running the following command:

    ```
    cf login API-URL
    ```
    Where `API-URL` is the API endpoint for the deployment for your leader service instance.  

1. Update your leader service instance with the follower `replication-credentials` by running the 
following command:
    
    ```
    cf update-service LEADER-INSTANCE -c REPLICATION-CREDS
    ```
    Where `REPLICATION-CREDS` is the output you recorded in step 5 above. 
    
    For example:
    <pre class="terminal">cf update-service my-leader -c {"replication-credentials":{
      "hostname": "q-n3s3y1.q-g1188.bosh",
      "ip": "10.0.18.12",
      "uuid": "ab12cd34-5678-91e2-345f-67891h234567"
      }
    }</pre>
1. Create a service key for your leader service instance by running the following command:

    ```
    cf create-service-key LEADER-INSTANCE SERVICE-KEY-NAME -c '{"replication-request": "credentials"}
    ```
    Where: 
    + `LEADER-INSTANCE` is the name of the leader service instance you created in step 1b above. 
    + `SERVICE-KEY-NAME` is a name you choose for the service key. 
1. View the `replication-credentials` for your leader service key by running the following command:

    ```
    cf service-key LEADER-INSTANCE SERVICE-KEY-NAME
    ```
    Where: 
    + `LEADER-INSTANCE` is the name of the leader service instance you created in step 1b above. 
    + `SERVICE-KEY-NAME` is the name of the leader service key you created in step 7 above. 
    
    For example:
    
    <pre class="terminal">$ cf service-key my-leader rep-key
      Getting key rep-key for service instance my-leader as user@example.com...

      {
        "replication-credentials": {
          "hostname": "q-n3s3y1.q-g1181.bosh",
          "ip": "10.0.17.12",
          "password": "a22aaa2a2a2aaaaa",
          "port": 3306,
          "username": "6bf07ae455a14064a9073cec8696366c",
          "uuid": "zy98xw76-5432-19v8-765u-43219t876543"
        }
      }</pre>
    
1. Record the output of the above command.
1. Log into the PCF deployment for your follower service instance by running the following command:

    ```
    cf login API-URL
    ```
    Where `API-URL` is the API endpoint for the deployment for your follower service instance. 
    
1. Update your follower service instance with the leader `replication-credentials` by 
running the following command:

    ```
    cf update-service FOLLOWER-INSTANCE -c REPLICATION-CREDS
    ```
    Where `REPLICATION-CREDS` is the output you recorded in step 10 above. 
    
    For example:
    <pre class="terminal"> cf update-service my-follower -c {"replication-credentials":{
      "hostname": "q-n3s3y1.q-g1181.bosh",
      "ip": "10.0.17.12",
      "password": "a22aaa2a2a2aaaaa",
      "port": 3306,
      "username": "6bf07ae455a14064a9073cec8696366c",
      "uuid": "zy98xw76-5432-19v8-765u-43219t876543"
      }
    }</pre>
    
