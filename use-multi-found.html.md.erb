---
title: Using MySQL for Pivotal Platform Multi-Foundation Replication
owner: MySQL
---
<strong><%= modified_date %></strong>

This topic provides instructions for developers using the <%= vars.product_name %> for replication
across multiple foundations.

<!-- LINK OUT TO DEF OF PXC SINGLE NODE, PRIMARY / SECONDARY ETC  -->
<!-- WHAT HAPPENS IF THEY MESS THIS UP - T-SHOOTING? -->
<!-- ADD LINKS BACK TO NORMAL USING DOC? -->
<!-- THERE WILL BE MORE PROCEDURES ON THIS PAGE -->
<!-- IF YOU UPDATE PLAN TO SOMETHING TRHAT IS NOT PXC-SINGLE-NODE BAD STUFF HAPPENS -->
<!-- UPDATE UPDATE-SERVICE COMMAND TO INCLUDE `replication-role:follower`? CHECK WHEN ACCEPTED #163158711 -->

## <a id="overview"></a>Overview

In <%= vars.product_name %> v2.7 and later, you can configure replication between two `<%= vars.single_leader_plan %>`service instances
across multiple foundations to create a leader-follower topology.
  
In the multi-foundation context, the two `<%= vars.single_leader_plan %>`service instances are 
referred to as a loosely coupled leader-follower service instance.

<p class="note"><strong>Note:</strong> A loosely coupled leader-follower service instance deployed across multiple 
  foundations is different from the tightly coupled leader-follower plan that <%= vars.product_name %> offers. 
  For information about the tightly coupled leader-follower plan, 
  see <a href="./about-leader-follower.html">About Leader-Follower</a>.</p>

For more information about multi-foundation architecture, see [About Multi-Foundation Replication](./about-multi-found.html).

## <a id="prereq"></a>Prerequisites

Before you use <%= vars.product_name %> across multiple foundations, you must have the following:

+ Access to the `<%= vars.single_leader_plan %>` plan
+ An operator configured multi-foundation architecture. For more information, see 
[Preparing for Multi-Foundation Replication](./prepare-multi-found.html).

## <a id='create-multi-dc'></a>Create a Multi-Foundation Leader-Follower Service Instance

Set up a leader-follower service instance of <%= vars.product_name %> across multiple foundations by doing the following:

1. Check the service availability in the Marketplace to see if there is an existing instance of <%= vars.product_name %> in your space. See [Confirm the <%= vars.product_name %> Service Availability](use.html#marketplace).
1. Create `<%= vars.single_leader_plan %>` service instances to configure a loosely coupled multi-foundation leader-follower service instance. See [Create <%= vars.single_leader_plan %> Service Instances](#create-multi-dc), below.
1. Establish a connection between the `<%= vars.single_leader_plan %>` service instances to enable replication. See [Configure Multi-Foundation Replication](#create-service-key), below  .
1. Bind the  `<%= vars.single_leader_plan %>` service instances to your apps. See [Bind a Leader-Follower Service Instance to Your App](#bind), below.
5. Modify your app to use the <%= vars.product_name %> service. [Use the MySQL Service in Your App](./use.html#call), below. 

After you create a leader-follower service instance across multiple foundations, you can manage it over the life cycle of your apps and data. For instructions on how to manage a <%= vars.product_name %> service instance, see [Manage Service Instances](./use.html#manage).

### <a id='create-service-instance'></a>Create <%= vars.single_leader_plan %> Service Instances

To create a leader-follower service instance across multiple foundations, you
must create a `<%= vars.single_leader_plan %>` service instance in two different
foundations.

Pivotal recommends that you create the leader `<%= vars.single_leader_plan %>` service instance
in your primary foundation and the follower `<%= vars.single_leader_plan %>`
service instance in your secondary foundation.

Create a leader-follower service instance by doing the following:

1. Create a `<%= vars.single_leader_plan %>` service instance in your primary foundation by doing the following:

    1. Log in to the PCF deployment for your primary foundation by running the following command:

        ```
        cf login PRIMARY-API-URL
        ```
        Where `PRIMARY-API-URL` is the API endpoint for the primary foundation.
        <br><br>
        For example:
        <pre class="terminal">$ cf login https<span>:</span>//primary.example.com</pre>

    1. Create a primary service instance by running the following command:

        ```
        cf create-service p.mysql PLAN PRIMARY-INSTANCE
        ```

        Where:
        - `PLAN` is the name of the <%= vars.product_name %> `<%= vars.single_leader_plan %>` plan you want to use.
        - `PRIMARY-INSTANCE` is a name you choose to identify the service instance.
        This name appears under `service` in output from `cf services`.

        For example:

        <pre class="terminal">$ cf create-service p.mysql db-small primary-node<br>
        Creating service primary-node in org my-org / space my-space as user<span>@</span>example.com...
        OK</pre>

        <p class="note"><strong>Note:</strong> Do not name your service instance
          <code>leader</code> or <code>follower</code>. If you trigger a failover,
          the service instances in your primary and secondary foundations switch roles.</p>

    1. (Optional) Watch the progress of the service instance creation by running the following command:

        ```
        watch cf services
        ```

        Wait for the `last operation` for your instance to show as `create succeeded`.
        <br><br>
        For example:

        <pre class="terminal">$ watch cf services<br>
        Getting services in org my-org / space my-space as user<span>@</span>example.com...
        OK
        name           service       plan        bound apps    last operation
        primary-node   p.mysql       db-small                  create succeeded
      </pre>
        If you get an error, see [Troubleshooting Instances](./troubleshoot-instances.html).

1. Create a `<%= vars.single_leader_plan %>` service instance in your secondary
foundation by repeating step 1, above, and replacing references to primary with secondary.

### <a id='create-service-key'></a>Configure Multi-Foundation Replication

After you create the leader and follower `<%= vars.single_leader_plan %>` service instances, you must establish a connection between them to enable 
replication. You do this by creating service keys with the host info of the follower instance and the credentials of the leader instance. 
You only use these service keys for establishing replication between `<%= vars.single_leader_plan %>` service instances.

The following steps assume that you have created the leader `<%= vars.single_leader_plan %>`
service instance in the primary foundation and the follower `<%= vars.single_leader_plan %>`
service instance in the secondary foundation. You created these service instances in
[Create <%= vars.single_leader_plan %> Service Instances](#create-multi-dc), above.

Create the service keys for your `<%= vars.single_leader_plan %>` service instances by doing the following:

1. Create a service key for the service instance in your secondary foundation by running the following command:

    ```
    cf create-service-key SECONDARY-INSTANCE SERVICE-KEY -c '{"replication-request": "host-info"}
    ```
    Where:
    + `SECONDARY-INSTANCE` is the name of the secondary service instance you created in
    step 2 of [Create <%= vars.single_leader_plan %> Service Instances](#create-multi-dc), above.
    + `SERVICE-KEY` is a name you choose for the service key.
    <br><br>
    For example:
    <pre class="terminal">cf create-service-key secondary-node rep-key -c '{"replication-request": "credentials" }'
        Creating service key rep-key for service instance secondary-node as user<span>@</span>example.com...
        OK
    </pre>

1. View the `replication-credentials` for your service key by running the following command:

    ```
    cf service-key SECONDARY-INSTANCE SERVICE-KEY
    ```
    Where:
    + `SECONDARY-INSTANCE` is the name of the secondary service instance you created in
    step 2 of [Create <%= vars.single_leader_plan %> Service Instances](#create-multi-dc), above.
    + `SERVICE-KEY` is the name of the service key you created in step 1, above.

    For example:

    <pre class="terminal">$ cf service-key secondary-node rep-key
      Getting key rep-key for service instance secondary-node as user@example.com...

      {
        "replication-credentials": {
          "hostname": "secondary.bosh",
          "ip": "10.0.19.12",
          "uuid": "ab12cd34-5678-91e2-345f-67891h234567"
        }
      }</pre>
1. Record the output of the above command.
1. Log in to the PCF deployment for your primary foundation by running the following command:

    ```
    cf login PRIMARY-API-URL
    ```
    Where `PRIMARY-API-URL` is the API endpoint for your primary foundation.
    <br><br>
    For example:
    <pre class="terminal">$ cf login https<span>:</span>//primary.example.com</pre>

1. Update your primary service instance with the secondary service key by running the
following command:

    ```
    cf update-service PRIMARY-INSTANCE -c REPLICATION-CREDS
    ```
    Where:
    + `PRIMARY-INSTANCE` is the name of the primary service instance you created in
    step 1 of [Create <%= vars.single_leader_plan %> Service Instances](#create-multi-dc), above.
    + `REPLICATION-CREDS` is the output you recorded in step 3, above.

    For example:
    <pre class="terminal">cf update-service primary-node -c {"replication-credentials":{ \
      "hostname": "secondary.bosh", \
      "ip": "10.0.18.12", \
      "uuid": "ab12cd34-5678-91e2-345f-67891h234567" \
      } \
    }</pre>
1.  Create a service key for the service instance in your primary foundation by
    running the following command:

    ```
    cf create-service-key PRIMARY-INSTANCE SERVICE-KEY-NAME -c '{"replication-request": "credentials"}
    ```
    Where:
    + `PRIMARY-INSTANCE` is the name of the primary service instance you created in
    step 1 of [Create <%= vars.single_leader_plan %> Service Instances](#create-multi-dc), above.
    + `SERVICE-KEY-NAME` is a name you choose for the service key.
    <br><br>
    For example:
    <pre class="terminal">cf create-service-key primary-node rep-key -c '{"replication-request": "credentials" }'
        Creating service key rep-key for service instance primary-node as user<span>@</span>example.com...
        OK
    </pre>
    <p class="note"><strong>Note:</strong> The <code>-c </code> flag is different than the one in step 1.</p>
1. View the `replication-credentials` for your service key by running the following command:

    ```
    cf service-key PRIMARY-INSTANCE SERVICE-KEY-NAME
    ```
    Where:
    + `PRIMARY-INSTANCE` is the name of the primary service instance you created in step 1
    of [Create <%= vars.single_leader_plan %> Service Instances](#create-multi-dc), above.
    + `SERVICE-KEY-NAME` is the name of the primary service key you created in step 6, above.

    For example:

    <pre class="terminal">$ cf service-key primary-node rep-key
      Getting key rep-key for service instance primary as user@example.com...

      {
        "replication-credentials": {
          "hostname": "primary.bosh",
          "ip": "10.0.17.12",
          "password": "a22aaa2a2a2aaaaa",
          "port": 3306,
          "username": "6bf07ae455a14064a9073cec8696366c",
          "uuid": "zy98xw76-5432-19v8-765u-43219t876543"
        },
        "replication-role": "follower"
      }</pre>

1. Record the output of the above command.
1. Log in to the PCF deployment for your secondary foundation by running the following command:

    ```
    cf login SECONDARY-API-URL
    ```
    Where `SECONDARY-API-URL` is the API endpoint for your secondary foundation.
    <br><br>
    For example:
    <pre class="terminal">$ cf login https<span>:</span>//secondary.example.com</pre>

1. Update your secondary service instance with the primary service key by running the following command:

    ```
    cf update-service SECONDARY-INSTANCE -c REPLICATION-CREDS
    ```
    Where:
    + `SECONDARY-INSTANCE` is name of the secondary service instance you created in step 2 of [Create <%= vars.single_leader_plan %> Service Instances](#create-multi-dc), above.
    + `REPLICATION-CREDS` is the output you recorded in step 8, above.

    For example:
    <pre class="terminal"> cf update-service secondary-node -c {"replication-credentials":{ \
        "hostname": "primary.bosh", \
        "ip": "10.0.17.12", \
        "password": "a22aaa2a2a2aaaaa", \
        "port": 3306, \
        "username": "6bf07ae455a14064a9073cec8696366c", \
        "uuid": "zy98xw76-5432-19v8-765u-43219t876543" \
      }, \
      "replication-role": "follower" \
    }</pre>
    
### <a id='bind'></a>Bind a Leader-Follower Service Instance to Your App

For an app to use a multi-foundation leader-follower service instance, you must bind the app to 
your primary and secondary service instances. For information about apps in multiple foundations, see 
[About Multi-Foundation Replication](./about-multi-found.html).

To bind an app to a leader-follower service instance, do the following:

1. Bind your app to your primary service instance by doing the following:
    1. Log in to the PCF deployment for your primary foundation by running the following command:

        ```
        cf login PRIMARY-API-URL
        ```
        Where `PRIMARY-API-URL` is the API endpoint for the primary foundation.
        <br><br>
        For example:
        <pre class="terminal">$ cf login https<span>:</span>//primary.example.com</pre>
      
    1. Push your app into the same space as the leader-follower service instance by running the following
    command:
      
        ```
        cf push
        ```
      
    1. Bind your app to your primary service instance by running the following command:

        ```
        cf bind-service APP PRIMARY-SERVICE-INSTANCE
        ```
        Where: 
        - `APP` is the app you want to use the leader-follower service instance.<br>
        - `PRIMARY-INSTANCE` is the name of the primary service instance you created in
        step 1 of [Create <%= vars.single_leader_plan %> Service Instances](#create-multi-dc), above.

        For example:
        <pre class="terminal">
        $ cf bind-service my-app primary-node<br>
        Binding service primary-node to my-app in org my-org / space my-space as user<span>@</span>example.com...
        OK
        TIP: Use 'cf push' to ensure your env variable changes take effect
        </pre>
        
    1. Restart your app by running the following command:
    
        ```
        cf restart APP
        ```
        Where `APP` is the app you bound to the leader-follower service instance in step 2, above.
    
1. Bind your app to your secondary service instance by repeating step 1, above, 
and replacing references to primary with secondary.

<p class="note"><strong>Note:</strong> After you bind your apps to your service instances, you must modify your apps to use the <%= vars.product_name %> service. For instructions on how to use <%= vars.product_name %> in your app, see <a href="./use.html#call"> Use the MySQL Service in Your App</a>.</p>
