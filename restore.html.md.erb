---
title: Manually Restoring from Backup
owner: MySQL
---

<strong><%= modified_date %></strong>

If you are restoring a service instance to the same foundation and you still have the original
service instance, then follow the instructions
in [Backing up and Restoring <%= vars.product_full %>](backup-restore.html).

This topic describes how to manually restore a
<%= vars.product_full %> service instance from a backup in the following cases:

+ You have lost or deleted the service instance that backup came from.
+ You are restoring to a different foundation.

## <a id="overview"></a>Overview

<p class="note"><strong>Note:</strong> VMware recommends
  that you always configure a single instance plan to streamline the
  restore process for leader-follower and HA cluster plans.
</p>

Restoring <%= vars.product_short %> from backup is a manual process primarily intended for
disaster recovery or migrating data to a different foundation.
Restoring a <%= vars.product_short %> service instance replaces all of its data and running state.




To restore a <%= vars.product_short %> instance from a backup:

1. [If Restoring a Backup from a Deleted Service Instance](#lost-instance)
1. [Identify and Download the Backup Artifact](#download)
1. [Retrieve Backup Encryption Key](#retrieve-key)
1. [Create and Prepare a New Service Instance for Restore](#prepare)
1. [Restore the Service Instance](#restore-instance)
1. [Restage the Service Instance](#restage)

##<a id="download"></a> Identify and Download the Backup Artifact

The procedure you need to follow to find and download the backup artifact depends on whether
or not the service instance was deleted.

Follow the procedure for your situation:

+ [If Restoring a Backup from a Deleted Service Instance](#lost-instance)
+ [If Restoring to a Different Foundation](#different-foundation)

### <a id="lost-instance"></a>If Restoring a Backup from a Deleted Service Instance

If you are restoring a backup from a lost or deleted instance,
you cannot follow the instructions in [Backing up and Restoring <%= vars.product_full %>](backup-restore.html)
because you do not have the GUID for the service instance nor the timestamp for the backup. 

The instructions on this section decribe how to find these things
and then download the backup artifact.

1. Find the GUID of the service instance by searching the broker logs.
   For example, try searching the broker log for entries about deleted deployments:

    <pre class="terminal">Description: delete deployment service_instance_<font color="red">6c1db434-29ef-47c4-9f22-59fe53676b07</font></pre> 
 
    For information about broker logs,
    see [Access Broker and Instance Logs and VMs](troubleshoot.html#bosh-cf-access).

1. Log in to your backup storage system.
   Your backup storage system is whatever you configured in [Configuring Backups](automated-backup.html).
   For example, it might be an S3 bucket or a file system on a backup host (SCP).

2. Identify and download the backup artifact, the tarfile.
   The name of the tarfile contains the GUID and an epoch timestamp.
   For example, `6c1db434-29ef-47c4-9f22-59fe53676b07_1598049440.tar`.

3. Record the backup ID, which is the name of the TAR file without the `.tar` extension.
   In the example, the backup ID is `6c1db434-29ef-47c4-9f22-59fe53676b07_1598049440`. 

4. Untar the backup artifact. Keep the file with the `tar.gpg` extension. 

    The file with the `.txt` extension is not needed.


### <a id="different-foundation"></a>If Restoring to a Different Foundation

If you have a backup of a service instance taken from one foundation,
and you want to restore the backup to a different foundation,
you cannot follow the instructions in [Backing up and Restoring <%= vars.product_full %>](backup-restore.html)
because the ApplicationDataBackupRestore (adbr) plugin does not work across foundations.

Instead, follow these instructions to identify and download the backup artifact.
These instructions are more straightforward
than [If Restoring a Backup from a Deleted Service Instance](#lost-instance) above
because you have access to the backed up service instance and therefore its GUID
and a timestamp for the backup.

1. Find the GUID of the service instance by running:

    ```
    cf service SERVICE-INSTANCE-NAME --guid
    ```

    Where is `SERVICE-INSTANCE-NAME` is the service instance from which the back up was taken.

    For example:

    <pre class="terminal">$ cf service my-instance --guid
    6c1db434-29ef-47c4-9f22-59fe53676b07
    </pre> 

2. List the backups available and determine the one you want to download:

    ```
    cf adbr list-backups SERVICE-INSTANCE-NAME
    ```

    Where is `SERVICE-INSTANCE-NAME` is the service instance from which the back up was taken.

    For example:

    <pre class="terminal">$ cf adbr list-backups my-instance
    Getting backups of service instance <strong>my-instance</strong> in orgâ€¦
    <strong>Backup ID                                         Time of Backup</strong>
    6c1db434-29ef-47c4-9f22-59fe53676b07_1598049440   Fri Aug 21 22:37:20 UTC 2020
    </pre> 

3. If the service instance is running, download the backup tarfile.
   Your backup storage system is whatever you configured in [Configuring Backups](automated-backup.html).
   For example, it might be an S3 bucket or a file system on a backup host (SCP).

4. Untar the backup artifact. Keep the file with the `tar.gpg` extension. 

    The file with the `.txt` extension is not needed.

##<a id="retrieve-key"></a> Retrieve Backup Encryption Key

Each backup artifact has its own encryption key, stored in <%= vars.app_runtime_abbr %> CredHub.

To retrieve the backup encryption key:

1. Find the GUID for the MySQL broker VM. HOW?

1. To SSH onto the broker VM, run:

    ```
    bosh -d pivotal-mysql-GUID ssh
    ```

    Where is `GUID` is the GUID recorded in step 1 above.

    For example:

    <pre class="terminal">$ bosh -d pivotal-mysql-f7f3ce3767943537c36a ssh</pre> 

2. Set the path for the CredHub CLI and run the post-start script to log in to the <%= vars.runtime %> CredHub:

    ```
    export PATH=/var/vcap/packages/credhub-cli/bin:$PATH
    /var/vcap/jobs/adbr-api/bin/post-start
    ```

    For example:
    <pre class="terminal">$ export PATH=/var/vcap/packages/credhub-cli/bin:$PATH
    $ /var/vcap/jobs/adbr-api/bin/post-start</pre>

    [TK: Provide some additional output from this script]

3. To obtain the encryption key for the backup, run:

    ```
    credhub get -n /tanzu-mysql/backups/BACKUP-ID
    ```

    Where is `BACKUP-ID` is the name of the backup artifact identified above.

    For example:

    <pre class="terminal">
    $ credhub get -n /tanzu-mysql/backups/6c1db434-29ef-47c4-9f22-59fe53676b07_1598049440
  id: b918cda9-0c8b-4011-bbba-f78bdb5ceea4
  name: /tanzu-mysql/backups/6c1db434-29ef-47c4-9f22-59fe53676b07_1598049440
  type: password
  value: NWjbvbB3pjOC
  version_created_at: "2020-08-21T22:37:20Z"
    </pre>

4. Record the value of the password type.
   This is the backup encryption key that need when you restore the backup.

    In this example, it is `NWjbvbB3pjOC`.
    You use this key when you restore the backup.<br>


##<a id="prepare"></a> Create and Prepare a New Service Instance for Restore

You can only restore single node and leader-follower backup artifacts to a single node service instance.
Ensure that the persistent disk in the single node plan is at
least as large as the persistent disk of your largest leader-follower.
For information about persistent disk sizing recommendations,
see <a href="recommended.html#persistent"> Persistent Disk Usage</a>.

To prepare a new service instance for restore:

1. Create a new MySQL service instance by running:

    ```
    cf create-service p.mysql NEW-PLAN NEW-INSTANCE-NAME
    ```

    Where:
    + `NEW-PLAN` is the name of the service plan for your new service instance.
        The plan you choose depends on the service instance topology you are
        restoring. If the topology you are restoring is:
          + **Single node or leader-follower:** Select a single node plan.
          + **HA cluster:** Select a HA cluster plan.
          + **<%= vars.single_leader_plan %>:** Select a <%= vars.single_leader_plan %> plan.
    + `NEW-INSTANCE-NAME` is the name of the new service instance.

    For more information, see [Create a Service Instance](./use.html#create).

1. Monitor the status of the service instance creation by running:

    ```
    watch cf service NEW-INSTANCE-NAME
    ```
    Where `NEW-INSTANCE-NAME` is the name of the new service instance.

1. Locate and record the GUID associated with your new service instance by running:

    ```
    cf service NEW-INSTANCE-NAME --guid
    ```

1. If you created a HA cluster service instance to restore to,
modify the deployment manifest to scale the instances to one:
  1. From the <%= vars.ops_manager %> VM, download the deployment manifest file by running:

        ```
        bosh -e BOSH-ENVIRONMENT -d service-instance_GUID \
         manifest > PATH-TO-MANIFEST.yml
        ```
        Where `GUID` is the service instance GUID you recorded in the above step.
        For example:
        <pre class="terminal">$ bosh -e my-env -d service-instance_12345678-90ab-cdef-1234-567890abcdef \
           manifest > ./manifest.yml</pre>
  1. Update the instance group for your new service instance as follows:

        ```yaml
        instance_groups:
        - name: mysql
          ...
          instances: 1    # Scale instances to 1
          ...
        ```
  1. Redeploy the deployment manifest by running:

        ```
        bosh -e BOSH-ENVIRONMENT -d service-instance_GUID \
         deploy PATH-TO-MANIFEST.yml
        ```
        For example:

        <pre class="terminal">$ bosh -e my-env -d service-instance_12345678-90ab-cdef-1234-567890abcdef \
          deploy ./manifest.yml</pre>
1. From the <%= vars.ops_manager %> VM, find and record the BOSH instance GUID for your service instance by running:

      ```
  bosh -e BOSH-ENVIRONMENT -d service-instance_GUID instances
      ```
      Where `GUID` is the service instance GUID you recorded in the above step.
      <br><br>
      For example:
      <pre class="terminal">$ bosh -e my-env -d service-instance_12345678-90ab-cdef-1234-567890abcdef instances
     Deployment 'service-instance_12345678-90ab-cdef-1234-567890abcdef' <br>
     Instance                                    Process State  AZ             IPs
     mysql/d7ff8d46-c3e8-449f-aea7-5a05b0a1929c  running        us-central1-a  10.0.8.10
     1 instances</pre>

     The BOSH instance GUID is the value after `mysql/`.
1. Copy the downloaded backup to the new service instance by running:

    ```
    bosh -e BOSH-ENVIRONMENT  -d service-instance_GUID \
      scp mysql-backup-TIMESTAMP.tar.gpg \
      mysql/BOSH-INSTANCE-GUID:DESTINATION-PATH
    ```
    [TK: Do the tar.gpg files have different names now? This is what we saw in S3] 
    ![Sample backup from S3](DeleteMeBackupName.png)
    Where:
    - `GUID` is the service instance GUID.
    - `BOSH-INSTANCE-GUID` is the BOSH instance GUID you recorded in the previous step.
    - `DESTINATION-PATH` is where the backup file saves on the BOSH VM.

    For example:
    <pre class="terminal">$ bosh -e my-env -d service-instance_12345678-90ab-cdef-1234-567890abcdef \
        scp mysql-backup-TIMESTAMP.tar.gpg \
        mysql/d7ff8d46-c3e8-449f-aea7-5a05b0a1929c:/tmp/</pre>

## <a id="restore-instance"></a> Restore the Service Instance

<p class="note warning">
  <strong>Warning:</strong> Restoring a service instance is destructive.
  VMware recommends that you only restore to a new and unused service instance.
</p>

You can restore a single node, leader-follower, HA cluster service, or <%= vars.single_leader_plan %> instance
using the restore utility.
The restore utility is packaged with the <%= vars.product_full %> tile.

The restore utility does the following:

* Deletes any existing data
* Decrypts and unzips the backup artifact
* Restores the backup artifact into the MySQL data directory

To restore a service instance:

1. Use the BOSH CLI to SSH in to the newly created MySQL service instance by following the procedure
in [BOSH SSH](https://docs.pivotal.io/pivotalcf/customizing/trouble-advanced.html#bosh-ssh).

1. After securely logging in to MySQL, become root by running:

    ```
    sudo su
    ```

1. Restore the backup artifact into the data directory by running:

    ```
    mysql-restore --encryption-key ENCRYPTION-KEY --restore-file RESTORE-FILE-PATH
    ```

    Where:
    + `ENCRYPTION-KEY` is the backup encryption key you recorded in
        [Retrieve Backup Encryption Key](#retrieve-key) above.
    + `RESTORE-FILE-PATH` is the full path on the MySQL VM where the backup artifact exists.
    
      [TK: is the above the "MySQL VM" or is it the "BOSH VM" mentioned in step 6 above?]

    For example:

    <pre class="terminal">$ mysql-restore --encryption-key NWjbvbB3pjOC --restore-file RESTORE-FILE-PATH </pre>
      [TK: Is this how the encryption key would look? and what would be the sample path,
       can you infer it from the example in the previous procedure?]

## <a id="restage"></a> Restage the Service Instance

After you restore your single node, leader-follower, HA cluster service instance, or
<%= vars.single_leader_plan %> you must restage your new service instance.
For <%= vars.single_leader_plan %> plans, you must also re-establish replication between
the leader and follower service instances.

To restage your service instance:

1. If you are restoring a leader-follower service instance, update the plan by running:

    ```
    cf update-service NEW-INSTANCE-NAME -p LEADER-FOLLOWER-PLAN
    ```

1. If you created a HA cluster service instance to restore to,
    modify the downloaded deployment manifest to scale the instances to three:
  1. Update the instance group for your new service instance as follows:

        ```yaml
        instance_groups:
        - name: mysql
          ...
          instances: 3    # Scale instances to 3
          ...
        ```
  1. From the <%= vars.ops_manager %> VM, redeploy the deployment manifest by running:

        ```
        bosh -e BOSH-ENVIRONMENT -d service-instance_GUID  deploy PATH-TO-MANIFEST.yml
        ```
        For example:

        <pre class="terminal">
        bosh -e my-env -d service-instance_12345678-90ab-cdef-1234-567890abcdef deploy ./manifest.yml
        </pre>
1. If you are restoring a <%= vars.single_leader_plan %> service instance,
    you must re-establish replication:
      1. Create a follower <%= vars.single_leader_plan %> service instance by following the procedure in
      [Create <%= vars.single_leader_plan %> Service Instances](./use-multi-site.html#create-service-instance).
        Ensure that you only create a follower service instance in the secondary foundation.
      1. Configure replication between the leader service instance you restored and the follower instance by
          following the procedure in [Configure <%= vars.single_leader_plan %>](./use-multi-site.html#create-service-key).

1. Determine if the app is currently bound to a MySQL service instance by running:

    ```
    cf services
    ```

1. If the previous step shows that the app is currently bound to a MySQL instance, unbind it by running:

    ```
    cf unbind-service APP-NAME OLD-INSTANCE-NAME
    ```

1. Update your app to bind to the new service instance by running:

    ```
    cf bind-service APP-NAME  NEW-INSTANCE-NAME
    ```

1. Restage your app to make the changes take effect by running:

    ```
    cf restage APP-NAME
    ```

Your app should be running and able to access the restored data.

<%= partial vars.path_to_partials + "/mysql/rebind-warning" %>
