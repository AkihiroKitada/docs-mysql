---
title: Monitoring and KPIs for On-Demand MySQL for PCF
owner: MySQL
---

<p class="note warning"><strong>Warning:</strong> <%= vars.first_product_name %> 
	v<%= product_info['local_product_version'] %> is no longer supported 
because it has reached the End of General Support (EOGS) phase.
To stay up to date with the latest software and security updates,
upgrade to a supported version.
</p>

This topic explains how to monitor the health of the MySQL for Pivotal Cloud Foundry (PCF) service using the logs, metrics, and Key Performance Indicators (KPIs) generated by MySQL for PCF component VMs.

For general information about logging and metrics in PCF, see [Logging and Metrics](http://docs.pivotal.io/pivotalcf/loggregator/index.html).

## <a id="metrics"></a>About Metrics

Metrics are regularly-generated log messages that report measured component states. The metrics polling interval is 30 seconds for MySQL instances and 60 seconds for the service broker.

Metrics are long, single lines of text that follow the format:

```
origin:"p.mysql" eventType:ValueMetric timestamp:1496776477930669688 deployment:"service-instance_2b5a001f-2bf3-460c-aee6-fd2253f9fb0c" job:"mysql" index:"b09df494-b731-4d06-a4b0-c2985ceedf4c" ip:"10.0.8.4" valueMetric:<name:"/p.mysql/performance/open_files" value:24 unit:"file" >
```

## <a id="kpi"></a>Key Performance Indicators

Key Performance Indicators (KPIs) for MySQL for PCF are metrics that operators find most useful for monitoring their MySQL service to ensure smooth operation. KPIs are high-signal-value metrics that can indicate emerging issues. KPIs can be raw component metrics or _derived_ metrics generated by applying formulas to raw metrics.

Pivotal provides the following KPIs as general alerting and response guidance for typical MySQL for PCF installations.
Pivotal recommends that operators continue to fine-tune the alert measures to their installation by observing historical trends.
Pivotal also recommends that operators expand beyond this guidance and create new, installation-specific monitoring
metrics, thresholds, and alerts based on learning from their own installations.

### <a id="kpi4MySQL"></a>KPIs for MySQL Service Instances

This section lists the KPIs that are specific for MySQL for PCF instances. 

For a list of general KPIs that apply to all instances, and not specifically to MySQL for PCF instances, see [BOSH System Health Metrics](#bosh).

For a list of all MySQL for PCF component metrics, see [All MySQL Metrics](#mysql-metrics).

#### <a id="server-heartbeat"></a> Server Availability

<table>
   <tr><th colspan="2" style="text-align: center;"><br> <%= vars.mysql_metrics_origin_v2 %>/available<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>MySQL Server is currently responding to requests, which indicates if the component is available.<br><br>

      <strong>Use</strong>: If the server does not emit heartbeats, it is offline.
      <br><br>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: boolean<br>
      <strong>Frequency</strong>: 30 s
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 5 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: N/A<br>
      <strong>Red critical</strong>: &lt; 1</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
         Check the MySQL Server logs for errors.
         You can find the instance by targeting your MySQL deployment with BOSH and inspecting logs for the instance.
         For more information, see <a href="https://docs.pivotal.io/p-mysql/troubleshoot.html#failing-jobs">Failing Jobs and Unhealthy Instances</a>.
      </td>
   </tr>
</table>

#### <a id="disk-free"></a> Persistent and Ephemeral Disk Used

<table>
   <tr><th colspan="2" style="text-align: center;"><br><%= vars.mysql_metrics_origin_v2 %>/system/persistent_disk_used_percent and <%= vars.mysql_metrics_origin_v2 %>/system/ephemeral_disk_used_percent<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>The percentage of disk used on the persistent and ephemeral file systems. <br /><br />
      <strong>Use</strong>: MySQL cannot function correctly if there isn't sufficient free space on the file systems. Use these metrics to ensure that you have disks large enough for your user base.</p>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: Percent<br>
      <strong>Frequency</strong>: 30 s (default)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Max of persistent disk used of all of nodes<br>and<br>Maximum ephemeral disk used of all nodes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: > 40% <br><br>
      <strong>Red critical</strong>: > 45%</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>Upgrade the service instance to a plan with larger disk capacity.</td>
   </tr>
</table>

#### <a id="connections"></a> Connections

<table>
   <tr><th colspan="2" style="text-align: center;"><br> <%= vars.mysql_metrics_origin_v2 %>/variables/max_connections<br>
     <%= vars.mysql_metrics_origin_v2 %>/net/max_used_connections <br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>The maximum number of connections used over the maximum permitted number of simultaneous client connections.<br><br>

      <strong>Use</strong>: If the number of connections drastically changes or if apps are unable
      to connect, there might be a network or app issue.</p>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: count<br>
      <strong>Frequency</strong>: 30 s<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td><code>max_used_connections</code> / <code>max_connections</code></td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 80 % <br>
      <strong>Red critical</strong>: &gt; 90 %</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>If this measurement mets or exceeds 80% with linear growth,
          increase the value of <code>max_connections</code>. <br><br> If this measurement mets or exceeds
          80% with exponential growth, monitor app usage to ensure everything
          is behaving as expected. <br><br>
          When approaching 100% of max connections, apps may be experiencing times when they
          cannot connect to the database.
          The connections/second for a service instance vary based on app instances and app utilization.
      </td>
   </tr>
</table>

#### <a id="cpu-utilization-percent"></a> CPU Utilization Percent

<table>
   <tr><th colspan="2" style="text-align: center;"><br> <%= vars.mysql_metrics_origin_v2 %>/performance/cpu_utilization_percent<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>CPU time being consumed by the MySQL service.<br><br>

      <strong>Use</strong>: A node that experiences context switching or high CPU usage will become unresponsive. This also affects the ability of the node to report metrics.
      <br><br>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: Percent<br>
      <strong>Frequency</strong>: 30 s (default)
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <strong>Yellow warning</strong>: > 80</td>
      <strong>Red critical</strong>: > 90</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>Determine what is using so much CPU. If it is from normal processes, update the service instance to use a plan with larger CPU capacity.</td>
   </tr>
</table>

#### <a id="open-files"></a> Queries Delta

<table>
   <tr><th colspan="2" style="text-align: center;"><br> <%= vars.mysql_metrics_origin_v2 %>/performance/queries_delta<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>The number of statements executed by the server over the last 30 seconds.<br><br>

      <strong>Use</strong>: The server should always be processing some queries. If the server does not process any queries, the server is non-functional.
      <br><br>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: count<br>
      <strong>Frequency</strong>: 30 s
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 2 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <strong>Red critical</strong>: 0</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>Investigate the MySQL server logs, such as the audit log, to understand why query rate changed and determine appropriate action.</td>
   </tr>
</table>
### <a id="bosh"></a> BOSH System Health Metrics

The BOSH layer that underlies <%= vars.product_name %> generates `healthmonitor` metrics for all VMs in the deployment.
However, these metrics are not included in the Loggregator Firehose by default.
To send BOSH HM metrics through the Firehose, install the open-source [HM Forwarder](https://github.com/cloudfoundry/bosh-hm-forwarder).
All BOSH-deployed components generate the following system health metrics; these metrics also serve as KPIs for the MySQL for PCF service.

#### <a id="persistent-disk"></a> Persistent Disk

<table>
   <tr><th colspan="2" style="text-align: center;"><br> persistent.disk.percent<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Persistent disk being consumed by the MySQL service instance.<br><br>
      <strong>Use</strong>: If the persistent disk fills up, MySQL will be unable to process queries and recovery is difficult.
      <br><br>
      <strong>Origin</strong>: JMX Bridge or BOSH HM<br>
      <strong>Type</strong>: percent<br>
      <strong>Frequency</strong>: 60 s (default)
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 75 <br>
      <strong>Red critical</strong>: &gt; 90</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>Update the service instance to use a plan with a larger persistent disk. This process may take some time,
        as the data is copied from the original persistent disk to a new one.
      </td>
   </tr>
</table>

#### <a id="ram"></a> RAM

<table>
   <tr><th colspan="2" style="text-align: center;"><br> system.mem.percent <br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>RAM being consumed by the MySQL service instance.<br><br>

      <strong>Use</strong>: MySQL increases its memory usage as the data set increases.
         This is normal, as much of that RAM is used to buffer IO.
         As long as there is enough remaining RAM for other processes on the instance, the MySQL server should be OK.
      <br><br>
      <strong>Origin</strong>: JMX Bridge or BOSH HM<br>
      <strong>Type</strong>: percentage<br>
      <strong>Frequency</strong>: 60 s (default)
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 95 <br>
      <strong>Red critical</strong>: &gt; 99</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>Update the service instance to a plan with more RAM.
      </td>
   </tr>
</table>

#### <a id="cpu"></a> CPU

<table>
   <tr><th colspan="2" style="text-align: center;"><br> system.cpu.percent<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>CPU time being consumed by the MySQL service.<br><br>

      <strong>Use</strong>: A node that experiences context switching or high CPU usage will become unresponsive.
      This also affects the ability of the node to report metrics.
      <br><br>
      <strong>Origin</strong>: JMX Bridge or BOSH HM<br>
      <strong>Type</strong>: percent<br>
      <strong>Frequency</strong>: 60 s (default)
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 80 <br>
      <strong>Red critical</strong>: &gt; 90</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td> Determine what is using so much CPU. If it is from normal processes, update the service instance to use
      a plan with larger CPU capacity.
      </td>
   </tr>
</table>
## <a id="mysql-metrics"></a> All MySQL Metrics

In addition to the above KPIs, the MySQL service emits the followings metrics that can be used for monitoring and alerting.

| **Data Source** | **Description** | **Metric Unit** |
| --- | --- | --- |
| `<%= vars.mysql_metrics_origin_v2 %>/available` | Indicates if the local database server is available and responding. | boolean |
| `<%= vars.mysql_metrics_origin_v2 %>/follower_seconds_behind_master` | The number of seconds the follower VM is behind in applying writes from the leader VM to its own database. | seconds |
| `<%= vars.mysql_metrics_origin_v2 %>/follower_seconds_since_leader_heartbeat` | The number of seconds that elapses between the leader heartbeat and the replication of the heartbeat in the follower database. | seconds |
| `<%= vars.mysql_metrics_origin_v2 %>/innodb/buffer_pool_free` | The number of free pages in the InnoDB Buffer Pool. | pages |
| `<%= vars.mysql_metrics_origin_v2 %>/innodb/buffer_pool_total` | The total number of pages in the InnoDB Buffer Pool. | pages |
| `<%= vars.mysql_metrics_origin_v2 %>/innodb/buffer_pool_used` | The number of used pages in the InnoDB Buffer Pool. | pages |
| `<%= vars.mysql_metrics_origin_v2 %>/innodb/current_row_locks` | The number of current row locks. | locks |
| `<%= vars.mysql_metrics_origin_v2 %>/innodb/data_reads` | The number of data reads. | reads/second |
| `<%= vars.mysql_metrics_origin_v2 %>/innodb/data_writes` | The number of data writes. | writes/second |
| `<%= vars.mysql_metrics_origin_v2 %>/innodb/mutex_os_waits` | The number of mutex OS waits. | events/second |
| `<%= vars.mysql_metrics_origin_v2 %>/innodb/mutex_spin_rounds` | The number of mutex spin rounds. | events/second |
| `<%= vars.mysql_metrics_origin_v2 %>/innodb/mutex_spin_waits` | The number of mutex spin waits. | events/second |
| `<%= vars.mysql_metrics_origin_v2 %>/innodb/os_log_fsyncs` | The number of fsync writes to the log file. | writes/second |
| `<%= vars.mysql_metrics_origin_v2 %>/innodb/row_lock_time` | Time spent in acquiring row locks. | milliseconds |
| `<%= vars.mysql_metrics_origin_v2 %>/innodb/row_lock_waits` | The number of times per second a row lock had to be waited for. | events/second |
| `<%= vars.mysql_metrics_origin_v2 %>/net/connections` | The number of connections to the server. | connection/second |
| `<%= vars.mysql_metrics_origin_v2 %>/net/max_connections` | The maximum number of connections that have been in use simultaneously since the server started. | connections |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/com_delete` | The number of delete statements. | queries/second |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/com_delete_multi` | The number of delete-multi statements. | queries/second |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/com_insert` | The number of insert statements. | query/second |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/com_insert_select` | The number of insert-select statements. | queries/second |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/com_replace_select` | The number of replace-select statements. | queries/second |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/com_select` | The number of select statements. | queries/second |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/com_update` | The number of update statements. | queries/second |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/com_update_multi` | The number of update-multi statements. | queries/second |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/created_tmp_disk_tables` | The number of internal on-disk temporary tables created each second by the server while executing statements. | table/second |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/created_tmp_files` | The number of temporary files created each second. | files/second |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/created_tmp_tables` | The number of internal temporary tables created each second by the server while executing statements. | tables/second |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/cpu_utilization_percent` | The percent of the CPU in use by all processes on the MySQL node. | percent |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/kernel_time` | Percentage of CPU time spent in kernel space by MySQL. | percent |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/key_cache_utilization` | The key cache utilization ratio. | fraction |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/open_files` | The number of open files. | files |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/open_tables` | The number of of tables that are open. | tables |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/qcache_hits` | The number of query cache hits. | hits/second |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/queries` | The number of statements executed by the server, excluding `COM_PING` and `COM_STATISTICS`. | count |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/queries_delta` | The change in the `/performance/queries` metric since the last time it was emitted. | integer greater than or equal to zero |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/questions` | The number of statements executed by the server. | queries/second |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/slow_queries` | The number of slow queries. | queries/second |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/table_locks_waited` | The total number of times that a request for a table lock could not be granted immediately and a wait was needed. | number |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/threads_connected` | The number of currently open connections. | connections |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/threads_running` | The number of threads that are not sleeping. | threads |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/user_time` | Percentage of CPU time spent in user space by MySQL. | percent |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/max_connections` | The maximum permitted number of simultaneous client connections. | integer |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/open_files_limit` | The number of files that the operating system permits [ **mysqld** ](https://dev.mysql.com/doc/refman/5.6/en/mysqld.html "4.3.1 mysqld — The MySQL Server") to open. | integer |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/open_tables` | The number of tables that are open. | integer |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/opened_tables` | The number of tables that have been opened. | integer |
| `<%= vars.mysql_metrics_origin_v2 %>/performance/opened_table_definitions` | The number of `.frm` files that have been cached. | integer |
| `<%= vars.mysql_metrics_origin_v2 %>/rpl_semi_sync_master_no_tx` | The number of transactions committed without follower acknowledgement. | integer |
| `<%= vars.mysql_metrics_origin_v2 %>/rpl_semi_sync_master_tx_avg_wait_time` | The average time the leader has waited for the follower to accept transactions. | microseconds |
| `<%= vars.mysql_metrics_origin_v2 %>/rpl_semi_sync_master_wait_sessions` | The current number of connections waiting for a sync commit. For more information about sync replication, see [Understanding Synchronous Replication](./change-default.html#synchronous-replication). | sessions |
| `<%= vars.mysql_metrics_origin_v2 %>/variables/read_only` | Whether the server is in read-only mode | boolean |
