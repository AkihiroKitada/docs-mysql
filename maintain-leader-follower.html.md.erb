---
title: Using Leader-Follower Topology For Availability
owner: MySQL
---

You can maintain availability of your MySQL databases by keeping two copies of your database,
one on a leader (master) instance, and another on a follower (slave) instance. If the leader instance fails due to hardware or software issues, or during a period of planned maintenance, you can initiate a failover to the follower instance, so that the apps that bind to your MySQL databases experience no downtime.

For more information, see:

* [About Leader-Follower](./about-leader-follower.html) 
* [Events that Interrupt Service](./interruptions.html)

## <a id="process"></a> Leader-Follower Setup and Failover Process

The following are the high-level steps for setting up and using the leader-follower topology:

1. The operator configures a leader-follower plan. This plan is available in the marketplace.

1. Developers create an instance from the leader-follower plan. Doing this automatically deploys two MySQL VMs in a leader-follower topology.

1. Developers bind apps to the leader in leader-follower plan instance, using the leader's IP address. Data is written to the leader, and asynchronously replicated on the follower.

1. If the leader instance fails, the operator manually triggers a failover, so the working instance (follower) becomes the new leader.

1. Apps bound to the leader-follower plan instance are automatically bound to the new leader after failover.


## <a id="pre-reqs"></a>Prerequisites


## <a id="config-plan"></a> Configure a Leader-Follower Service Plan

You can configure up to five leader-follower service plans in a MySQL for PCF tile deployment.

Once you configure the leader-follower plan, it is available in the marketplace. When a developer creates a leader-follower service instance, a leader VM is automatically deployed in one AZ, and a follower VM is deployed in another AZ.

To configure a leader-follower service plan, do the following:

1. Follow the steps for [configuring an active service plan](install-config.html#active), and do the following specifically for the leader-follower plan:
	1. Click the tab for any of the five available service plans: Plan 1 to Plan 5.
	1. Select the **Multi-node deployment** checkbox.
		![multi node checkbox](multi-node-box.png)
	1. Select a **MySQL VM Type** and a **MySQL Persistent Disk**.
	1. Select two **MySQL Availability Zones** to use for the MySQL VMs.
	1. Click **Save**.
1. In the Ops Manager Installation Dashboard, click **Apply Changes**.



## <a id="monitor"></a> Monitor Leader-Follower Instances

In order to decide if a failover is needed, you must monitor leader-follower instances.


## <a id="failover"></a> Trigger a Failover

You may want to trigger a failover to the follower VM if the leader fails or its performance degrades, or if you want to take the leader down to do planned maintenance. 

To trigger a failover do the following:

1. For each app bound to the

## <a id="validate"></a> Validate the New Follower Configuration After Failover

## <a id="errands"></a> Leader-Follower Errands

MySQL for PCF provides errands that a PCF operator can use to easily control the lifecycle of a leader-follower service instance without being an
expert at MySQL. These errands are:

- **configure-leader-follower**---Configures replication on the follower and ensures the leader is writable.
  This errand runs after every create or update of a leader-follower instance.
  The errand fails and alerts operators, via BOSH errand output, if the service instance is in bad state.

- **make-leader**---Used to promote a follower VM to a leader.
  This errand removes replication configuration from a follower VM,
  waits for all transactions to be applied to the VM, and sets the VM as writable. The errand fails if the original
  leader is still accessible to protect against data divergence.

- **make-read-only**---Used to fence the leader if it is still accessible.
  This errand sets the VM to read only and ensures that, if the follower is accessible, all transactions have been relayed to the follower.
  For general information about fencing a leader,
  see the Wikipedia article [Fencing (computing)](https://en.wikipedia.org/wiki/Fencing_(computing)).

Using the errands above, an operator can create failover scripts.

