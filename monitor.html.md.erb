---
title: Monitoring and KPIs for On-Demand MySQL for PCF
owner: MySQL
---

This topic explains how to monitor the health of the MySQL for Pivotal Cloud Foundry (PCF) service using the logs, metrics, and Key Performance Indicators (KPIs) generated by MySQL for PCF component VMs.

See [Logging and Metrics](http://docs.pivotal.io/pivotalcf/loggregator/index.html) for general information about logging and metrics in PCF.

## <a id="metrics"></a>Metrics

Metrics are regularly-generated log messages that report measured component states. The metrics polling interval is 30 seconds for MySQL instances and 60 seconds for the service broker.

Metrics are long, single lines of text that follow the format:

```
origin:"p-mysql" eventType:ValueMetric timestamp:1496776477930669688 deployment:"service-instance_2b5a001f-2bf3-460c-aee6-fd2253f9fb0c" job:"mysql" index:"b09df494-b731-4d06-a4b0-c2985ceedf4c" ip:"10.0.8.4" valueMetric:<name:"/p-mysql/performance/open_files" value:24 unit:"file" >
```

## <a id="kpi"></a>Key Performance Indicators

Key Performance Indicators (KPIs) for MySQL for PCF are metrics that operators find most useful for monitoring their MySQL service to ensure smooth operation. KPIs are high-signal-value metrics that can indicate emerging issues. KPIs can be raw component metrics or _derived_ metrics generated by applying formulas to raw metrics.

Pivotal provides the following KPIs as general alerting and response guidance for typical MySQL for PCF installations.
Pivotal recommends that operators continue to fine-tune the alert measures to their installation by observing historical trends.
Pivotal also recommends that operators expand beyond this guidance and create new, installation-specific monitoring
metrics, thresholds, and alerts based on learning from their own installations.

For a list of all MySQL for PCF raw component metrics, see [All MySQL Metrics](#mysql-metrics).

#### <a id="server-heartbeat"></a> Server Availability

<table>
   <tr><th colspan="2" style="text-align: center;"><br> /p-mysql/available<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>MySQL Server is currently responding to requests, which indicates if the component is available.<br><br>

      <strong>Use</strong>: If the server does not emit heartbeats, this indicates that it is offline.
      <br><br>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: boolean<br>
      <strong>Frequency</strong>: 30 s
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 5 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: N/A<br>
      <strong>Red critical</strong>: &lt; 1</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
         Check the MySQL Server logs for errors. You can find the VM by targeting your MySQL deployment with BOSH and inspecting logs for the instance.
      </td>
   </tr>
</table>

#### <a id="connections"></a> Connections

<table>
   <tr><th colspan="2" style="text-align: center;"><br> /p-mysql/net/connections<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>The rate of connections to the server shown as connection/second.<br><br>

      <strong>Use</strong>: If the number of connections drastically changes, or applications are unable to connect, may indicate a network or application issue.</p>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: count<br>
      <strong>Frequency</strong>: 30 s<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 1 minute</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 80 <br>
      <strong>Red critical</strong>: &gt; 90</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>The connections / second for a given service instance will vary based on application instances and app utilization. If this metric is met or exceeded for an extended period of time, consider one of the following actions:
      <ul><li>Monitoring application usage to ensure everything is behaving as expected.</li>
      </td>
   </tr>
</table>

#### <a id="open-files"></a> Open Files

<table>
   <tr><th colspan="2" style="text-align: center;"><br> /p-mysql/performance/open_files<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>The rate of statements executed by the server. Shown as query/second<br><br>

      <strong>Use</strong>: This can be used to gain insight into trends and utilization of the server.
      <br><br>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: count<br>
      <strong>Frequency</strong>: 30 s
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 2 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: 0 <br>
      <strong>Red critical</strong>: &gt; 120 </td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>Investigate the MySQL server logs, such as the audit log, to understand why questions changed and determine appropriate action.</td>
   </tr>
</table>

#### <a id="user-time"></a> User Time

<table>
   <tr><th colspan="2" style="text-align: center;"><br> /p-mysql/performance/user_time<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Percentage of CPU time spent in user space by MySQL shown as percent<br><br>

      <strong>Use</strong>: This closely reflects the number of tables that the MySQL server has created.
      <br><br>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: count<br>
      <strong>Frequency</strong>: 30 s
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 2 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 80% <br>
      <strong>Red critical</strong>: &gt; 90% </td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>If this metric meets or exceeds the recommended thresholds for extended periods of time,
      Run SHOW PROCESSLIST, identify which queries or apps are using so much CPU.
      </td>
   </tr>
</table>

### <a id="bosh"></a> BOSH System Metrics

All BOSH-deployed components generate the following system metrics; these system metrics also serve as KPIs for the MySQL for PCF service.

#### <a id="ram"></a> RAM

<table>
   <tr><th colspan="2" style="text-align: center;"><br> system.mem.percent <br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>RAM being consumed by the <code>p-rabbitmq</code> VM.<br><br>

      <strong>Use</strong>: MySQL increases its memory footprint as the server increases in size.
              As long as there is enough remaining RAM for other processes on the service instance, the MySQL
              server should be ok.
      <br><br>
      <strong>Origin</strong>: JMX Bridge or BOSH HM<br>
      <strong>Type</strong>: percent<br>
      <strong>Frequency</strong>: 30 s (default)
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 80 <br>
      <strong>Red critical</strong>: &gt; 90</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>Update the service instance to use a larger plan.
      </td>
   </tr>
</table>

#### <a id="cpu"></a> CPU

<table>
   <tr><th colspan="2" style="text-align: center;"><br> system.cpu.percent<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>CPU being consumed by the MySQL server.<br><br>

      <strong>Use</strong>: A node that experiences context switching or high CPU usage will become unresponsive.
      This also affects the ability of the node to report metrics.
      <br><br>
      <strong>Origin</strong>: JMX Bridge or BOSH HM<br>
      <strong>Type</strong>: percent<br>
      <strong>Frequency</strong>: 30 s (default)
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 78 <br>
      <strong>Red critical</strong>: &gt; 85</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td> Determine what is utilizing so much CPU. If it is from normal processes, update the service instance to use
      a larger plan.
      </td>
   </tr>
</table>

#### <a id="persistent-disk"></a> Persistent Disk

<table>
   <tr><th colspan="2" style="text-align: center;"><br> persistent.disk.percent<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Ephemeral Disk being consumed by the MySQL database.<br><br>
      <strong>Use</strong>: If the persistent disk fills up, dataloss and recovery is difficult.
      <br><br>
      <strong>Origin</strong>: JMX Bridge or BOSH HM<br>
      <strong>Type</strong>: percent<br>
      <strong>Frequency</strong>: 30 s (default)
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 75 <br>
      <strong>Red critical</strong>: &gt; 90</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>Update the service instance to use a larger plan.
      </td>
   </tr>
</table>

## <a id="mysql-metrics"></a> All MySQL Metrics

In addition to the above Key Performance Indicators, the MySQL service emits the followings metrics that can be used for monitoring and alerting.

| **Data Source** | **Description** | **Metric Unit** |
| --- | --- | --- |
| `/p-mysql/available` | Indicates if the local database server is available and responding. | boolean |
| `/p-mysql/innodb/buffer_pool_free` | The number of free pages in the InnoDB Buffer Pool. | pages |
| `/p-mysql/innodb/buffer_pool_total` | The total number of pages in the InnoDB Buffer Pool. | pages |
| `/p-mysql/innodb/buffer_pool_used` | The number of used pages in the InnoDB Buffer Pool. | pages |
| `/p-mysql/innodb/buffer_pool_utilization` | The utilization of the InnoDB Buffer Pool. | fraction |
| `/p-mysql/innodb/current_row_locks` | The number of current row locks. | locks |
| `/p-mysql/innodb/data_reads` | The rate of data reads. | reads/second |
| `/p-mysql/innodb/data_writes` | The rate of data writes. | writes/second |
| `/p-mysql/innodb/mutex_os_waits` | The rate of mutex OS waits. | events/second |
| `/p-mysql/innodb/mutex_spin_rounds` | The rate of mutex spin rounds. | events/second |
| `/p-mysql/innodb/mutex_spin_waits` | The rate of mutex spin waits. | events/second |
| `/p-mysql/innodb/os_log_fsyncs` | The rate of fsync writes to the log file. | writes/second |
| `/p-mysql/innodb/row_lock_time` | Time spent in acquiring row locks. | milliseconds |
| `/p-mysql/innodb/row_lock_waits` | The number of times per second a row lock had to be waited for. | events/second |
| `/p-mysql/net/connections` | The rate of connections to the server. | connection/second |
| `/p-mysql/net/max_connections` | The maximum number of connections that have been in use simultaneously since the server started. | connections |
| `/p-mysql/performance/com_delete` | The rate of delete statements. | queries/second |
| `/p-mysql/performance/com_delete_multi` | The rate of delete-multi statements. | queries/second |
| `/p-mysql/performance/com_insert` | The rate of insert statements. | query/second |
| `/p-mysql/performance/com_insert_select` | The rate of insert-select statements. | queries/second |
| `/p-mysql/performance/com_replace_select` | The rate of replace-select statements. | queries/second |
| `/p-mysql/performance/com_select` | The rate of select statements. | queries/second |
| `/p-mysql/performance/com_update` | The rate of update statements. | queries/second |
| `/p-mysql/performance/com_update_multi` | The rate of update-multi. | queries/second |
| `/p-mysql/performance/created_tmp_disk_tables` | The rate of internal on-disk temporary tables created by second by the server while executing statements. | table/second |
| `/p-mysql/performance/created_tmp_files` | The rate of temporary files created by second. | files/second |
| `/p-mysql/performance/created_tmp_tables` | The rate of internal temporary tables created by second by the server while executing statements. | tables/second |
| `/p-mysql/performance/kernel_time` | Percentage of CPU time spent in kernel space by MySQL. | percent |
| `/p-mysql/performance/key_cache_utilization` | The key cache utilization ratio. | fraction |
| `/p-mysql/performance/open_files` | The number of open files. | files |
| `/p-mysql/performance/open_tables` | The number of of tables that are open. | tables |
| `/p-mysql/performance/qcache_hits` | The rate of query cache hits. | hits/second |
| `/p-mysql/performance/questions` | The rate of statements executed by the server. | queries/second |
| `/p-mysql/performance/slow_queries` | The rate of slow queries. | queries/second |
| `/p-mysql/performance/table_locks_waited` | The total number of times that a request for a table lock could not be granted immediately and a wait was needed. | number |
| `/p-mysql/performance/threads_connected` | The number of currently open connections. | connections |
| `/p-mysql/performance/threads_running` | The number of threads that are not sleeping. | threads |
| `/p-mysql/performance/user_time` | Percentage of CPU time spent in user space by MySQL. | percent |
| `/p-mysql/performance/max_connections` | The maximum permitted number of simultaneous client connections. | integer |
| `/p-mysql/performance/open_files_limit` | The number of files that the operating system permits [ **mysqld** ](https://dev.mysql.com/doc/refman/5.6/en/mysqld.html "4.3.1 mysqld — The MySQL Server") to open. | integer |
| `/p-mysql/performance/open_tables` | The number of tables that are open. | integer |
| `/p-mysql/performance/opened_tables` | The number of tables that have been opened. | integer |
| `/p-mysql/performance/opened_table_definitions` | The number of `.frm` files that have been cached. | integer |
