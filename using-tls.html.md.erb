---
title: Using TLS
owner: MySQL
---

This topic describes how developers can use TLS to secure the communication between their apps and the MySQL for Pivotal Cloud Foundry (PCF) v2 service.

To use TLS with your apps, the PCF operator must have completed the procedures in [Preparing for TLS](prepare-tls.html) and enabled TLS in the tile configuration when performing the steps in [Installing and Configuring MySQL for PCF](install-config.html).

The procedures below describe how to [enable TLS](#enable-tls) for your service instances, and how to [modify your apps](#modify-apps) to use TLS. 

##<a id='enable-tls'></a> Enable TLS

You cannot automatically configure encryption for a service instance when creating the instance. 
Instead, you must enable encryption for the instance after creating it.

Perform the following steps to enable TLS for an existing service instance:

1. Create a service key, specifying the name of your service instance and a name for the service key.
	<br><br> 
	Run the following command:

	```
	cf create-service-key SERVICE-INSTANCE SERVICE-KEY
	```
	<br>
	Where:
	* `SERVICE-INSTANCE` is the name of the existing service instance that you want to secure communication to and from.
	* `SERVICE-KEY` is a name for the service key you are creating.
	<br><br>
	For example:
	<pre class="terminal">$ cf create-service-key my-service-instance my-service-key</pre>

1. Retrieve the service key credentials, specifying the same values as above. 
	For example:
	<pre class="terminal">$ cf service-key my-service-instance my-service-key
	{
 	"hostname": "10.1.16.3",
 	"jdbcUrl":    "jdbc:mysql<span>:</span>//10.1.16.3:3306/service\_instance\_db?user=6bf07ae455a14064a9073cec8696366c\u0026password=a22aaa2a2a2aaaaa\u0026",
 	"name": "service\_instance\_db",
 	"password": "a22aaa2a2a2aaaaa",
 	"port": 3306,
 	"uri": "mysql<span>://</span>6bf07ae455a14064a9073cec8696366c:a22aaa2a2a2aaaaa<span>@</span>10.244.16.3:3306/service\_instance\_db?reconnect=true",
 	"username": "6bf07ae455a14064a9073cec8696366c"
	}
	</pre>
1. In the output, record the value for `hostname`.
1. Update the existing service instance to enable TLS by providing configuration parameters.
	<br><br>
	Run the following command:

	```
	cf update-service SERVICE-INSTANCE \
		-c '{"enable_tls": "HOSTNAME"}'
	```
	<br>
	Where:
	* `SERVICE-INSTANCE` is the name of the existing service instance that you want to secure communication to and from.
	* `HOSTNAME` is the value for `hostname` retrieved above.
	<br><br>
	For example:
	<pre class="terminal">
	$ cf update-service my-service-instance \
		-c '{"enable_tls": "10.1.16.3"}'
	</pre>
	If you receive the following error message, the operator has not enabled TLS. See the procedures in [Preparing for TLS](prepare-tls.html) and [Installing and Configuring MySQL for PCF](install-config.html).

		```
		TLS has not been enabled in the service offering. Speak with your Operator to make this available.
		```
1. Delete the service instance. For example:
	<pre class="terminal">
	$ cf delete-service-key my-service-instance \
		my-service-key
	</pre>

##<a id='modify-apps'></a> Modify Apps for TLS

In order for your apps to use TLS, you must update them to request encrypted communications when connecting to the MySQL data service. 

The procedure for updating your app depends on the app's language and framework.

Java and Spring apps automatically detect TLS, while apps written in other languages and frameworks must be manually modified to use TLS.

###<a id='java-spring'></a> Java and Spring Apps

Java and Spring apps will automatically detect if a service instance has TLS enabled. 

In order to activate TLS for Java and Spring apps, you must stop and rebind the app to the service instance after enabling TLS on the instance. 
Perform the following steps:

1. Stop the app. For example:
	<pre class="terminal">$ cf stop my-app</pre>
1. Unbind the app from the service instance. For example:
	<pre class="terminal">$ cf unbind-service my-app my-service-instance</pre>
1. Re-bind the app to the service instance. For example:
	<pre class="terminal">$ cf bind-service my-app my-service-instance</pre>
1. Restage the app. For example:
	<pre class="terminal">$ cf restage my-app</pre>

Your app should now communicate securely with the MySQL service instance.

###<a id='other-apps'></a> Other Apps

In order to activate TLS for apps not written in Java or Spring, you must modify them to discover the CA certificate in `VCAP_SERVICES` and specify that CA component when initiating the connection to the data service.

`VCAP_SERVICES` is an environment variable that exists within every container. It contains runtime-specific information about the app, including metadata supplied by each of the services that have been bound to that app. The metadata includes the information necessary to connect to the service, such as hostnames, usernames and passwords.

Your app must perform the following tasks:

1. Retrieve the hostname, username, password, database name, and CA certificate for the bound MySQL for PCF service instance from the `VCAP_SERVICES` environment variable
1. Use the hostname, username, password, and CA certificate to establish a secure connection with the bound MySQL for PCF service instance

For example, the following Node.js code initializes a variable named `mysql_creds`, and then populates it with the necessary information from `VCAP_SERVICES`:

```js
var mysql_creds = {} ;
var vcap_services = undefined ;

if (process.env.VCAP_SERVICES) {
    vcap_services = JSON.parse(process.env.VCAP_SERVICES) ;
    mysql_creds["host"] = vcap_services["p.mysql"][0]["credentials"]["hostname"] ;
    mysql_creds["user"] = vcap_services["p.mysql"][0]["credentials"]["username"] ;
    mysql_creds["password"] = vcap_services["p.mysql"][0]["credentials"]["password"] ;
    mysql_creds["port"] = vcap_services["p.mysql"][0]["credentials"]["port"] ;
    mysql_creds["database"] = vcap_services["p.mysql"][0]["credentials"]["name"] ;
    if (vcap_services["p.mysql"][0]["credentials"]["tls"]) {
        mysql_creds["ca_certificate"] = vcap_services["p.mysql"][0]["credentials"]["tls"]["cert"]["ca"];
    } else {
        mysql_creds["ca_certificate"] = undefined ;
    }
}
```

The following Node.js function establishes a TLS connection with the MySQL service, using the information loaded into `mysql_creds`:

```js
function MySQLConnect() {
    clientConfig = {
        host : mysql_creds["host"],
        user : mysql_creds["user"],
        password : mysql_creds["password"],
        port : mysql_creds["port"],
        database : mysql_creds["database"]
    } ;
    if (mysql_creds["ca_certificate"]) {
        clientConfig["ssl"] = { ca : mysql_creds["ca_certificate"] } ;
    }
    dbClient = mysql.createConnection( clientConfig ) ;
    dbClient.connect(CALLBACK-FUNCTION) ;
}
```

After modifying your app, repush it with `cf push`. 

<p class="note warning"><strong>WARNING</strong>: If you enabled encryption after creating the service instance, you must rebind the app, following the procedure in the <a href="#java-spring">Java and Spring Apps</a> section.</p>


