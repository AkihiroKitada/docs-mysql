---
title: Backing Up and Restoring VMware Tanzu SQL &#91;MySQL for VMs&#93;
owner: MySQL
---

<strong><%= modified_date %></strong>

This topic describes how to back up and restore a <%= vars.product_full %> service instance.
Both operators and developers can use the procedures in this topic.

Operators can configure backups in the <%= vars.product_short %> tile by following the procedures in
[Configuring Backups](./automated-backup.html).

Additionally, developers can create logical backups using `mysqldump`.
For information, see [Backing Up and Restoring with mysqldump](./backup-mysqldump.html).

## <a id="overview"></a> Overview

You can back up and restore a <%= vars.product_short %> service instance using the
Cloud Foundry Command Line Interface (cf CLI).
The backup artifacts you create in this topic are physical backups.
The following procedures do not create logical backup artifacts.
Restoring a physical backup is faster than restoring a logical backup and
has less downtime.

You might want to backup or restore a service instance in the following use cases:

+ Disaster recovery
+ Troubleshooting
+ Testing

## <a id='prerequisite'></a> Prerequisite: adbr Plugin

Before you can manually back up or restore a service instance,
you must have installed the ApplicationDataBackupRestore (adbr) plugin
for the Cloud Foundry Command Line Interface (cf CLI) tool.

To install the plugin, run:

```
cf install-plugin -r CF-Community "ApplicationDataBackupRestore"
```


## <a id="backup"></a> Manually Back Up a Service Instance

To manually trigger a backup outside of the configured schedule:

1. Back up your service instance by running:

    ```
    cf adbr backup SOURCE-INSTANCE
    ```

    Where `SOURCE-INSTANCE` is the service instance you are backing up.
1. View the status of the backup process by running:

    ```
    cf adbr get-status SOURCE-INSTANCE
    ```

    For example:

    <pre class="terminal">$ cf adbr get-status myDB
      Getting status of service instance myDB in org my-org / space my-space as user...
      [Mon May 18 18:08:25 UTC 2020] Status: Backup was successful. Uploaded 3.2M</pre>

## <a id="restore"></a> Restore a Service Instance

You can only restore to a single node or a <%= vars.single_leader_plan %> service instance.
If you want a different topology, update the instance after restoring the data:


<table class="nice">
<col width="33%">
<col width="33%">
	<th>To restore to…</th>
	<th>First, restore to…</th>
	<th>Then update to…</th>
	<tr>
		<td>Leader-Follower</td>
		<td>Single node</td>
		<td>Leader-Follower</td>
	</tr>
	<tr>
		<td>HA cluster</td>
		<td><%= vars.single_leader_plan %></td>
		<td>HA cluster</td>
	</tr>
</table>
Operators must ensure that the persistent disk in the single node plan is at least as large
as the persistent disk of the largest leader-follower plan. 
Similarly, they must ensure that the persistent disk in the <%= vars.single_leader_plan %> plan
is at least as large as the persistent disk of the largest HA cluster plan.
For information about persistent disk sizing recommendations,
see <a href="recommended.html#persistent"> Persistent Disk Usage</a>.

There are some cases where you cannot use the procedure below:

<table class="nice">
<col width="50%">
<col width="50%">
	<th>Do not use the procedure in this section to restore a backup…</th>
	<th>Instead, see…</th>
	<tr>
          <td>created with <%= vars.product_short %> v2.8 or earlier</td>
          <td><a href="http://docs-pcf-staging.cfapps.io/p-mysql/2-8/restore.html">
           Restoring <%= vars.product_short %></a>.</td>
	</tr>
	<tr>
          <td>from a deleted service instance</td>
          <td><a href="restore.html">Manually Restoring from Backup</a>.</td>
	</tr>
	<tr>
          <td>to a different foundation</td>
          <td><a href="restore.html">Manually Restoring from Backup</a>.</td>
	</tr>
</table>

To restore a service instance:

1. Create a new MySQL service instance to restore to by running:

    ```
    cf create-service p.mysql NEW-PLAN DESTINATION-INSTANCE
    ```

    Where:
    + `NEW-PLAN` is the name of the service plan for your new service instance.
        The plan you choose depends on the service instance topology that you are
        restoring. If the topology that you are restoring is:
          + **Single node or leader-follower:** Select a single node plan.
          + **<%= vars.single_leader_plan %> or HA cluster:**
              Select a <%= vars.single_leader_plan %> plan.
    + `DESTINATION-INSTANCE` is a name that you choose to identify the service instance.

    You restore the backup artifact to this service instance.
    For more information, see [Create a Service Instance](./use.html#create).

1. View the available backup artifacts for your service instance by running:

    ```
    cf adbr list-backups SOURCE-INSTANCE
    ```

    Where `SOURCE-INSTANCE` is an instance you backed up in
    [Back up a Service Instance](#backup) above.<br>

    For example:
    <pre class="terminal">$ cf adbr list-backups myDB
      Getting backups of service instance myDB in org my-org / space my-space as user...
      Backup ID                                         Time of Backup
      a41bf723-2538-4020-9d16-50cccb7b7c8d_1589825284   Mon May 18 18:08:04 UTC 2020</pre>

      Record the `Backup ID` from the above output.

1. Restore the service instance by running:

    ```
    cf adbr restore DESTINATION-INSTANCE BACKUP-ID
    ```
    Where is `BACKUP-ID` is the ID you recorded in the above step. <br><br>

    For example:

    <pre class="terminal">$ cf adbr restore myTargetDB a41bf723-2538-4020-9d16-50cccb7b7c8d_1589825284</pre>

1. View the status of the restore process by running:

    ```
    cf adbr get-status DESTINATION-INSTANCE
    ```

    For example:

    <pre class="terminal">$ cf adbr get-status myTargetDB
      Getting status of service instance myTargetDB in org my-org / space my-space as user...
      [Fri Jun 5 22:29:24 UTC 2020] Status: Restore was successful </pre>

1. If you are restoring a leader-follower or HA cluster service instance,
    update the plan by running:

    ```
    cf update-service DESTINATION-INSTANCE -p PLAN
    ```
    Where `PLAN` is the plan for the topology that you want to restore.

1. Determine if your app is bound to a service instance by running:

    ```
    cf services
    ```

    For example:
    <pre class="terminal">$ cf services
    Getting services in org my-org / space my-space as user...
    OK
    name          service     plan        bound apps    last operation
    myDB          p.mysql     db-small    my-app        create succeeded
    myTargetDB    p.mysql     db-small                  create succeeded
    </pre>

1. If an app is currently bound to a service instance, unbind it by running:

    ```
    cf unbind-service APP-NAME SOURCE-INSTANCE
    ```

    <%= partial vars.path_to_partials + "/mysql/rebind-warning" %>

1. Update your app to bind to the new service instance by running:

    ```
    cf bind-service APP-NAME DESTINATION-INSTANCE
    ```

1. Restage your app by running:

    ```
    cf restage APP-NAME
    ```

##<a id="monitor-backups"></a> Monitor Automatic Backups

It is important to verify that automatic backups are being taken according to schedule.

Automatic backups can fail for these reasons:

+ Reason 1 (bad cron expression?)
+ Reason 2 (storage too full?)
+ 

Two ways to check that backups are being made:

+ [Use the  adbr Plugin](#use-adbr)
+ [Use Healthwatch or Other Monitoring Tool](#use-healthwatch)

### <a id="use-adbr"></a> Use the adbr Plugin

The `adbr` plugin is a quick way to list backups for a single instance.

Q: HOW many get listed? 

+ List recent backups for an instance using the `adbr` plugin by running:

    ```
    cf adbr list-backups SOURCE-INSTANCE
    ```

    Where `SOURCE-INSTANCE` is an instance you backed up in
    [Back up a Service Instance](#backup) above.<br>

    For example:
    <pre class="terminal">$ cf adbr list-backups myDB
      Getting backups of service instance myDB in org my-org / space my-space as user...
      Backup ID                                         Time of Backup
      a41bf723-2538-4020-9d16-50cccb7b7c8d_1589825284   Mon May 18 18:08:04 UTC 2020
      ADD A FEW MORE HERE</pre>

### <a id="use-healthwatch"></a> Use Healthwatch or Other Monitoring Tool

For each backup of each instance in the foundation, <%= vars.product_short %> emits a metric
called `last_successful_backup`.
Collecting and alerting on this metric is a good way to monitor backups for many instances.

+ Monitor the `last_successful_backup` metric through Healthwatch or similar monitoring app.

    For details about the metric,
    see [Hours Since Last Successful Backup](./monitor.html#last-successful-backup)
    in _Monitoring and KPIs for <%= vars.product_full %>_.<br><br>

    A healthy backup metric shows as a saw-tooth plot.
    The dotted red line represents the scheduled time between backups.
    After the scheduled time has elapsed, the backup is taken and the metric is set back to zero.

    <%= image_tag("metric-since-last-backup-healthy.png", :alt => "A plot of the last successful backup metric. When the metric increases linearly until the backup is made. The metric falls back to zero and then increases again.", :width => "720") %>

    <a href="./images/metric-since-last-backup-healthy.png" target="_blank" aria-hidden="true">View a larger version of this image</a>

