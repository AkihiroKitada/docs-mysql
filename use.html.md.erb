---
title: Using MySQL for PCF
owner: MySQL
---

<strong><%= modified_date %></strong>

This topic provides instructions for developers using the MySQL for Pivotal Cloud Foundry (PCF) service for their
PCF apps. MySQL provides a relational database for apps and devices.

These procedures use the Cloud Foundry Command Line Interface (cf CLI). For more information,
see [Managing Service Instances with the cf CLI](http://docs.pivotal.io/devguide/services/managing-services.html).

You can also use [Apps Manager](http://docs.pivotal.io/pivotalcf/console/dev-console.html) to do the same tasks using a graphical UI.


## <a id="prereqs"></a>Prerequisites

To use MySQL for PCF with your PCF apps, you need:

* A PCF installation with [MySQL for PCF](https://network.pivotal.io/products/p-mysql) installed and listed
in the [Marketplace](http://docs.pivotal.io/devguide/services/#instances)
* A [Space Developer](http://docs.pivotal.io/pivotalcf/concepts/roles.html#roles) or Admin account on the PCF installation
* A local machine with the following installed:
   - a browser
   - a shell
   - the [Cloud Foundry Command-Line Interface](http://docs.pivotal.io/pivotalcf/cf-cli/install-go-cli.html) (cf CLI)
   - the Linux [watch](http://www.linfo.org/watch.html) command
* To [log in to](http://docs.pivotal.io/pivotalcf/cf-cli/getting-started.html#login) the org and space containing your app


## <a id='process'></a>The Process for Using MySQL for PCF in Your App

To use MySQL in a PCF app:

1. Check the service availability in the Marketplace,
   and see if there is an existing instance of MySQL for PCF in your space.

    See [Confirm the MySQL for PCF Service Availability](#marketplace), below.

2. If there is no existing instance or you want to use a different one,
   create an instance of the MySQL for PCF service in the same space as the app.

    See [Create a Service Instance](#create), below.

3. Push your app into the same space as the MySQL for PCF service instance,
   using `cf push`.

    For information about `cf push`,
   see [Push](http://docs.pivotal.io/pivotalcf/2-0/cf-cli/getting-started.html#push).

4. Bind the app to the MySQL for PCF service instance, to enable the app to use MySQL.

    See [Bind a Service Instance to Your App](#bind), below.

5. Call the MySQL for PCF service in your app code, and then re-push your app into the space.

    See [Use the MySQL Service in Your App](#call), below.



## <a id='marketplace'></a>Confirm the MySQL for PCF Service Availability

For an app to use the MySQL for PCF service, both of the following must be true:

* The service must be available in the Marketplace for its space.
* An instance of the service must exist in its space.

You can confirm both of these using the cf CLI as follows.

### <a id="check-marketplace"></a> Check Service Availability in the Marketplace

To find out if a MySQL for PCF service is available in the Marketplace, do the following:

1. Enter the following command:

    ```
    cf marketplace
    ```

1. If the output lists `p.mysql` in the `service` column, MySQL for PCF is available.
   If it is not available, ask your operator to install it.

    <pre class="terminal">
    $ cf marketplace
    Getting services from marketplace in org my-org / space my-space as user<span>@</span>example.com...
    OK
    service             plans          description
    [...]
    p.mysql             db-small       Dedicated instances of MySQL service to provide a relational database
    [...]
    </pre>

### <a id="check-instance"></a> Check That an Instance Is Running in the Space

To confirm that a MySQL for PCF instance is running in the space, do the following:

1. Use the [cf CLI](http://docs.pivotal.io/pivotalcf/cf-cli/getting-started.html#login) or
[Apps Manager](http://docs.pivotal.io/pivotalcf/customizing/console-login.html) to log in to the org and space that contains the app.
1. Enter the following command:

    ```
    cf services
    ```
1. Any `p.mysql` listings in the `service` column are service instances of MySQL for PCF in the space.
<br><br>
For example:
    <pre class="terminal">
    $ cf services
    Getting services in org my-org / space my-space as user<span>@</span>example.com...
    OK
    name          service     plan        bound apps    last operation
    my-instance   p.mysql     db-small                  create succeeded
    </pre>
    You can [bind](#bind) your app to an existing instance or [create](#create) a new instance to bind to your app.

## <a id='create'></a>Create a Service Instance

On-demand services are created asynchronously, not immediately.
The `watch` command shows you when your service instance is ready to bind and use.

To create an instance of the MySQL for PCF service, do the following:

1. Run the following command:

    ```
    cf create-service p.mysql PLAN SERVICE-INSTANCE`<br><br>
    ```

    Where:<br>
    - `PLAN` is the name of the MySQL for PCF plan you want to use.
    - `SERVICE-INSTANCE` is a name you choose to identify the service instance.
    This name appears under `service` in output from `cf services`.

1. Enter the following command and wait for the `last operation` for
your instance to show as `create succeeded`.

    ```
    watch cf services
    ```

    For example:

    <pre class="terminal">
   $ cf create-service p.mysql db-small my-instance<br>
    Creating service my-instance in org my-org / space my-space as user<span>@</span>example.com...
    OK<br>
   $ watch cf services<br>
    Getting services in org my-org / space my-space as user<span>@</span>example.com...
    OK
    name          service       plan        bound apps    last operation
    my-instance   p.mysql       db-small                  create succeeded
</pre>

    If you get an error, see [Troubleshooting Instances](./troubleshoot-instances.html).

## <a id="bind"></a>Bind a Service Instance to Your App

For an app to use a service, you must bind the app to a service instance. Do this after you push or re-push the app using `cf push`.

To bind an app to a MySQL for PCF instance run the following command:

```
cf bind-service APP SERVICE-INSTANCE
```

Where:<br>

- `APP` is the app you want to use the MySQL service instance.<br>
- `SERVICE-INSTANCE` is the name you supplied when you ran `cf create-service`.

For example:

<pre class="terminal">
$ cf bind-service my-app my-instance<br>
Binding service mydb to my-app in org my-org / space test as user<span>@</span>example.com...
OK
TIP: Use 'cf push' to ensure your env variable changes take effect
</pre>

## <a id="call"></a>Use the MySQL Service in Your App

To access the MySQL service from your app:

1. Verify that your app code (or the MySQL client library that the app uses) retries in the case of DNS timeouts.

1. Run the following command:

    ```
    cf env APP-NAME
    ```

    Where `APP-NAME` is the name of the app bound to the MySQL for PCF instance.

1. In the output, note the connection strings listed in the `VCAP_SERVICES` > `credentials` object for the app.

1. In your app code, call the MySQL service using the connection strings.<br><br>
  See this example [Node.js code](./modify-apps-tls.html#call-service).


## <a id="manage"></a> Manage Service Instances

This section describes tasks you do over the life cycle of your apps and data:

+ Moving your data to a different plan.
+ Removing an app's access to a service it no longer needs.
+ Deleting a service instance that is not used.

### <a id="update"></a>Update a Service Instance to a Larger Plan

As apps and their databases grow, it may be necessary to update the service instance to a larger plan.
This does not require a rebinding of your app. However, while the instance is being migrated to a new service instance,
the database will be unavailable for several minutes.

To update a service instance to a larger plan, run the following command:

```
cf update-service SERVICE-INSTANCE -p PLAN
```

Where `PLAN` is the plan you want to upgrade the service instance to.

For example:

<pre class="terminal">
$ cf update-service my-instance -p db-large
</pre>


### <a id="unbind"></a>Unbind an App from a Service Instance

To stop an app from using a service it no longer needs, run the following command to unbind the app from the service:

```
cf unbind-service APP SERVICE-INSTANCE
```

Where:<br>

- `APP` is the app you want to stop using the MySQL service instance. <br>
- `SERVICE-INSTANCE` is the name you supplied when you ran `cf create-service`.

For example:

<pre class="terminal">
$ cf unbind-service my-app my-instance<br>
Unbinding app my-app from service my-instance in org my-org / space my-space as user<span>@</span>example.com...
OK
</pre>

### <a id="delete"></a>Delete a Service Instance

You cannot delete a service instance that an app is bound to.

To delete a service instance, do the following:

1. Run the following command:

    ```
    cf delete-service SERVICE-INSTANCE
    ```

    Where `SERVICE-INSTANCE` is the name of the service to delete.
    <br><br>
    For example:

    <pre class="terminal">
    $ cf delete-service my-instance<br>
    Are you sure you want to delete the service my-instance ? y
    Deleting service my-service in org my-org / space my-space as user<span>@</span>example.com...
    OK
    </pre>

1. Enter the following command and wait for a `Service instance not found` error indicating
that the instance no longer exists:

    ```
    watch cf service SERVICE-INSTANCE
    ```


##<a id='remote-connection'></a> Connecting to a Service Instance From Outside the Foundation

If you are connecting to a MySQL service instance from within your PCF foundation, you can do so by using the BOSH DNS hostname provided in service keys and app bindings. This process is more complex if you wish to connect from outside the PCF foundation where the service instance is located. Some use cases included, but are not limited to:

* [Connecting from your local workstation](././use.html#mysql-for-pcf-tools), e.g. using MySQL Workbench or a MySQL command-line client
* Connecting an app on a different PCF foundation
* Connecting a legacy app that is completely off-platform
* Taking a manual backup to be stored locally

You can connect to a MySQL service instance from outside the PCF foundation using one of the two following methods.

###<a id='ssh-tunnel'></a> Connecting via an App SSH Tunnel

Any CF application deployed within the foundation can resolve BOSH DNS hostnames and forward traffic to MySQL service instance via an App SSH Tunnel. 

Your Operator **must** [allow SSH access to app containers](https://docs.pivotal.io/pivotalcf/2-3/opsguide/config-ssh.html) in order to connect using this method.

For information on configuring an SSH tunnel, see [Configure Your SSH Tunnel](https://docs.pivotal.io/pivotalcf/2-3/devguide/deploy-apps/ssh-services.html#ssh-tunnel)

###<a id='ip-address'></a> Connect Directly to an IP Address

Alternatively, you can connect remotely to the MySQL service instance by directly using its IP Address. There are multiple methods for obtaining the IP address.

<p class="note"><strong>Note:</strong> By connecting to the MySQL service istance directly over its IP address, the client is responsible to handle cases in which the IP address of the service instance will change transparently. This can happen when a VM is recreated, or during a failover.</p>

####<a id='ip-address-cf-ssh'></a> Obtain the IP Address Using cf SSH

Your Operator **must** [allow SSH access to app containers](https://docs.pivotal.io/pivotalcf/2-3/opsguide/config-ssh.html) in order to connect using this method.

1. Obtain the BOSH DNS hostname of the MySQL service instance. For example:

  <pre class="terminal">
  $ cf service-key SERVICE-INSTANCE MYSQL-SERVICE-KEY
  Getting key testkey for service instance galeraTLS as admin...

  {
   "hostname": "q-n3s3y1.q-g693.bosh",
   ...
  }
  </pre>
1. Have an app deployed on the same foundation as the MySQL service instance.
1. SSH into the app container:

  <pre class="terminal">
  $ cf ssh APP-NAME
  </pre>
1. Run the following command to obtain the IP address of the service instance.

  <pre class="terminal">
  $ dig +short BOSH-DNS-HOSTNAME
  10.0.16.19
  </pre>
  Where:
    * `BOSH-DNS-HOSTNAME` is the BOSH DNS hostname that you retrieved from Step 1.

####<a id='ip-address-lookup'></a> Obtain the IP Address Using DNS Lookup App

For foundations with App SSH disabled, you can deploy an app to your foundation that will resolve BOSH DNS hostnames for you.

![DNS Lookup App](dns-lookup-app.png)

See the DNS Lookup [code repo](https://github.com/menicosia/dns-lookup).

####<a id='ip-address-bosh'></a> Obtain the IP Address Using the BOSH CLI

You must have access to the BOSH CLI in order to connect using this method.

1. Obtain the MySQL service instance GUID:

  <pre class="terminal">
  $ cf service SERVICE-INSTANCE --guid
  b2e92d56-27e2-407e-90e0-c34612c10dba
  </pre>
1. Perform the steps in [Gather Credential and IP Address Information](https://docs.pivotal.io/pivotalcf/customizing/trouble-advanced.html#gather)
   and [SSH into Ops Manager](https://docs.pivotal.io/pivotalcf/customizing/trouble-advanced.html#ssh) of
   <em>Advanced Troubleshooting with the BOSH CLI</em> to SSH into the Ops Manager VM.
1. From the Ops Manager VM, log in to your BOSH Director with the BOSH CLI.
   See [Log in to the BOSH Director](https://docs.pivotal.io/pivotalcf/customizing/trouble-advanced.html#log-in) in
   <em>Advanced Troubleshooting with the BOSH CLI</em>.
1. Use the BOSH CLI to view the VM information of the MySQL service instance:
  <pre><code>bosh -d service-instance\_GUID instances</code></pre>
  <br>
  Where `GUID` is the GUID of the service instance retrieved above.
  <br><br>
  For example:
  <pre class="terminal">
  $ bosh -d service-instance\_b2e92d56-27e2-407e-90e0-c34612c10dba \
      instances
  Using environment 'https://10.0.0.6:25555' as client 'admin'

  Task 21409. Done

  Deployment 'service-instance_0b26c8d1-2795-438e-bcbf-339e77daf88e'

  Instance                                    Process State  AZ  IPs
  mysql/1373022d-4eab-46d3-8fd1-a12067edf597  running        z2  10.0.17.14

  1 instances

  Succeeded
  </pre>
  If the MySQL service instance is a Highly Available cluster, you may connect to any of `mysql/*` instances. If it is a Leader-Follower topology, you will have to run the `inspect` BOSH errand to determine the IP address of the Leader node. For example:
  <pre><code>bosh -d service-instance\_GUID run-errand inspect</code></pre>

  Observe the output:
  <pre class="terminal">
  Instance   mysql/ca0ed8b5-7590-4cde-bba8-7ca2935f2bd0
  Exit Code  0
  Stdout     2018/04/03 18:08:46 Started executing command: inspect
            2018/04/03 18:08:46
            IP Address: 10.0.8.11
            Role: leader
            Read Only: false
            Replication Configured: false
            Replication Mode: async
            Has Data: true
            GTID Executed: 82ddc607-710a-404e-b1b8-a7e3ea7ec063:1-18
            2018/04/03 18:08:46 Successfully executed command: inspect
  Stderr     -
  <br>
  Instance   mysql/37e4b6bc-2ed6-4bd2-84d1-e59a91f5e7f8
  Exit Code  0
  Stdout     2018/04/03 18:08:46 Started executing command: inspect
            2018/04/03 18:08:46
            IP Address: 10.0.8.10
            Role: follower
            Read Only: true
            Replication Configured: true
            Replication Mode: async
            Has Data: true
            GTID Executed: 82ddc607-710a-404e-b1b8-a7e3ea7ec063:1-18
            2018/04/03 18:08:46 Successfully executed command: inspect
  </pre>
  The instance marked `Role: leader` is the Leader node.

##<a id='establish-tls'></a> Establish a TLS Connection to a Service Instance

You can use `mysql` to establish a TLS connection to a MySQL for PCF service instance that has TLS enabled. For more information about how to enable TLS for a service instance, see [Using TLS](using-tls.html).

Perform the following steps:

1. Create a new service key for the service instance with TLS enabled. For example:
  <pre class="terminal">$ cf create-service-key my-service-instance my-tls-service-key
  {
   "hostname": "q-n3s3y1.q-g693.bosh",
   "jdbcUrl": "jdbc:mysql<span>://</span>q-n3s3y1.q-g693.bosh:3306/service\_instance\_db?user=6bf07ae455a14064a9073cec8696366c\u0026password=a22aaa2a2a2aaaaa\u0026=true",
   "name": "service\_instance\_db",
   "password": "a22aaa2a2a2aaaaa",
   "port": 3306,
   "tls": {
    "cert": {
     "ca": "-----BEGIN CERTIFICATE-----\...n-----END CERTIFICATE-----\n"
    }
   },
   "uri": "mysql<span>://</span>6bf07ae455a14064a9073cec8696366c:a22aaa2a2a2aaaaa<span>@</span>q-n3s3y1.q-g693.bosh:3306/service\_instance\_db?reconnect=true",
   "username": "6bf07ae455a14064a9073cec8696366c"
  }
  </pre>
  If the service key does not have a CA certificate under `tls.cert.ca`, the service key may be stale. Create a new one.

1. Copy the contents of the CA certificate under `tls.cert.ca` and paste it into a file. For example:
  <pre class="terminal">$ pbpaste > root.pem</pre>

1. Record the values for `username`, `password`, and `hostname`.

1. Use `mysql` to establish a TLS connection to the MySQL instance.
  Run the following command:
  <pre><code>mysql --host=HOSTNAME \
    --user=USERNAME \
    --password=PASSWORD \
    --ssl-ca=root.pem \
    --ssl-verify-server-cert</code></pre>
  <br>
  Where:
    * `HOSTNAME` is the value for `hostname` retrieved above.
    * `USERNAME` is the value for `username` retrieved above.
    * `PASSWORD` is the value for `password` retrieved above.
  <br><br>
  For example:
    <pre class="terminal">
    $ mysql --hostname=q-n3s3y1.q-g693.bosh \
      --user=6bf07ae455a14064a9073cec8696366c \
      --password=a22aaa2a2a2aaaaa \
      --ssl-ca=root.pem \
      --ssl-verify-server-cert
    </pre>

<p class="note"><strong>Note:</strong> If BOSH DNS is enabled, you can only connect to the MySQL service instance from within the PCF foundation. To connect to a MySQL from outside the foundation, see the [cf CLI MySQL Plugin](././use.html#plugin).</p>

## <a id="dev-tools"></a>MySQL for PCF Tools

The following tools let developers access their MySQL for PCF databases. 

### <a id="mysqlweb"></a>Pivotal MySQLWeb Database Management App

The Pivotal MySQLWeb app provides a web-based UI for managing MySQL for PCF databases.
The free app lets you view and operate on tables, indexes, constraints, and other database structures, and directly execute SQL commands.

![Pivotal MySQLWeb](mysqlweb.png)

You can run the Pivotal MySQLWeb app in two ways:

* Standalone on your own machine
* Deployed to PCF

If you deploy Pivotal MySQLWeb to PCF, you can configure it in the deployment manifest to automatically bind to a specific service instance.

See the Pivotal MySQLWeb [code repo](https://github.com/pivotal-cf/PivotalMySQLWeb) and
[demo video](https://drive.google.com/file/d/0B2wmRcJj8XF-SXloNFNNaGJXbFk/view),
for how to install and run Pivotal MySQLWeb.

### <a id="plugin"></a>cf CLI MySQL Plugin

To connect to your MySQL for PCF databases from a command line, use the cf CLI MySQL plugin.
The plugin lets you:

* Inspect databases for debugging
* Manually adjust database schema or contents in development environments
* Dump and restore databases

To install the cf CLI MySQL plugin, run the following:

<pre class="terminal">
$ cf install-plugin -r "CF-Community" mysql-plugin
</pre>

For more information, see the [cf-mysql-plugin](https://github.com/andreasf/cf-mysql-plugin) repository.

### <a id="desktop"></a> Use Desktop Tools

You can connect your MySQL for PCF databases to a desktop tool, such as MySQL Workbench
or Sequel Pro, if you have the credentials for your MySQL service instance.

If you do not have credentials for your MySQL service instance, follow the procedure in
[Create Read-only Access Credentials](././customize-access.html).

To connect your databases to a desktop tool do the following:

1. To retrieve the credentials from your MySQL service instance service key, run the following
command:

    ```
    cf service-key SERVICE-INSTANCE MYSQL-SERVICE-KEY
    ```
    Where:
      * `SERVICE-INSTANCE` is the name of your service instance.
      * `KEY-NAME` is the name of your service key.

    For example:

    <pre class="terminal">
      $ cf service-key mydb mykey1<br>
      {
        "hostname": "q-n3s3y1.q-g693.bosh",
        "jdbcUrl": "jdbc:mysql<span>://</span>q-n3s3y1.q-g693.bosh:3306/service\_instance\_db?user=6bf07ae455a14064a9073cec8696366c\u0026password=a22aaa2a2a2aaaaa\u0026=true",
        "name": "service\_instance\_db",
        "password": "a22aaa2a2a2aaaaa",
        "port": 3306,
        "uri": "mysql<span>://</span>6bf07ae455a14064a9073cec8696366c:a22aaa2a2a2aaaaa<span>@</span>q-n3s3y1.q-g693.bosh:3306/service\_instance\_db?reconnect=true",
        "username": "6bf07ae455a14064a9073cec8696366c"
      }
    </pre>

1. Record the values for the following:
    * `hostname`
    * `name`
    * `password`
    * `port`
    * `username`

1. Configure an SSH tunnel using the values for `hostname` and `port` that you recorded in the above step.
   For information on configuring an SSH tunnel,
   see [Configure Your SSH Tunnel](https://docs.pivotal.io/pivotalcf/2-3/devguide/deploy-apps/ssh-services.html#ssh-tunnel).

1. Configure a connection in your desktop tool using the values for `hostname`, `name`, `password`, `port`, and `username` that you recorded in the above step.

## <a id="example-app"></a>Example App

To help app developers get started with MySQL for PCF, Pivotal provides an example app, which can be downloaded [here][example-app].
Instructions are in the README.

[example-app]:mysql-example-app.tgz
