---
title: Using MySQL for PCF Across Multiple Foundations 
owner: MySQL
---
<strong><%= modified_date %></strong>

This topic provides instructions for developers using the MySQL for Pivotal Cloud Foundry (PCF) 
across multiple foundations. 

LINK OUT TO DEF OF PXC SINGLE NODE, PRIMARY / SECONDARY  
MAKE A VAR FOR PLAN NAME 
WHAT HAPPENS IF THEY MESS THIS UP - T-SHOOTING
ADD LINKS BACK TO NORMAL USING DOC?
## <a id="overview"> </a>Overview 

In MySQL for PCF v2.6 and later, you can deploy two `<%= vars.single_leader_plan %>`service instances 
in separate BOSH deployments across multiple foundations to create a leader-follower topology.  
In the multiple foundation context, this leader-follower topology is referred to as a single leader-follower service instance.
This typology enables you to spread the leader-follower service instance across orgs, spaces, foundations, or data centers.

<p class="note"><strong>Note:</strong> This topology is different from the standard leader-follower plan that MySQL for PCF offers. In the 
standard leader-follower plan, two VMs are deployed as a single service instance. </p>

Operators can configure multiple foundations to be in the same data center or spread across multiple data centers. This is useful for the following use cases:

* Active-Passive Disaster Recovery strategy
* Active-Active Disaster Recovery strategy
* Off-Platform Access

### Terminology
* Primary Foundation
* Secondary Foundation
  
For more information about the above multiple foundation architectures, see [SOME LINK TO ARCH PAGE]().

Prereq 
Operator has enabled `<%= vars.single_leader_plan %>` plan 
you have multiple foundation arch - primary and foundation 

## <a id='set-up-multi-dc'></a>Set up a Leader-Follower Service Instance Across Multiple Foundations

Set up a leader-follower service instance of MySQL for PCF across multiple foundations by doing the following:

1. [Create a Leader-Follower Service Instance](#create-multi-dc)
1. [Create Service Keys for `<%= vars.single_leader_plan %>` Service Instances](#create-service-key)


### <a id='create-multi-dc'></a>Create a Leader-Follower Service Instance

To create a leader-follower service instance across multiple foundations, you must create `<%= vars.single_leader_plan %>` service instances in your primary and secondary foundations.

You should create the leader `<%= vars.single_leader_plan %>` service instance in your primary foundation and the follower `<%= vars.single_leader_plan %>` service instance in your secondary foundation.

Create a leader-follower service instance by doing the following:

1. Create a `<%= vars.single_leader_plan %>` service instance in your primary foundation by doing the following:
    
    1. Log into the PCF deployment for your primary foundation by running the following command:
      
        ```
        cf login PRIMARY-API-URL
        ```
        Where `PRIMARY-API-URL` is the API endpoint for the primary foundation. 

    1. Create a primary service instance by running the following command:

        ```
        cf create-service p.mysql PLAN PRIMARY-INSTANCE
        ```

        Where:
        - `PLAN` is the name of the MySQL for PCF `<%= vars.single_leader_plan %>` plan you want to use.
        - `PRIMARY-INSTANCE` is a name you choose to identify the service instance.
        This name appears under `service` in output from `cf services`. 
        
        <p class="note"><strong>Note:</strong> Do not name your service instance <code>leader</code> or <code>follower</code>. If you trigger a failover, the service instances in your primary and secondary foundations switch roles.</p>

    1. (Optional) Watch the progress of the service instance creation by running the following command and waiting for the `last operation` for
    your instance to show as `create succeeded`.

        ```
        watch cf services
        ```

        For example:

        <pre class="terminal">$ cf create-service p.mysql db-small primary-node<br>
        Creating service primary-node in org my-org / space my-space as user<span>@</span>example.com...
        OK<br>
       $ watch cf services<br>
        Getting services in org my-org / space my-space as user<span>@</span>example.com...
        OK
        name           service       plan        bound apps    last operation
        primary-node   p.mysql       db-small                  create succeeded
      </pre>

      If you get an error, see [Troubleshooting Instances](./troubleshoot-instances.html).

1. Create a `<%= vars.single_leader_plan %>` service instance in your secondary foundation by repeating step 1, above, and replacing references to primary with secondary. 

### <a id='create-service-key'></a>Create Service Keys for `<%= vars.single_leader_plan %>` Service Instances

After you create the leader and follower `<%= vars.single_leader_plan %>` service instances, you must create service keys for these instances. You should only use these service keys for establishing replication between `<%= vars.single_leader_plan %>` service instances. 

The following steps assume that you have created the leader `<%= vars.single_leader_plan %>` service instance in the primary foundation, and the follower `<%= vars.single_leader_plan %>` service instance in the secondary foundation.

You create these service instances in [Create a Leader-Follower Service Instance](#create-multi-dc), above. 

Create the service keys for your `<%= vars.single_leader_plan %>` service instances by doing the following:
    
1. Create a service key for the service instance in your secondary foundation by running the following command:

    ```
    cf create-service-key SECONDARY-INSTANCE SERVICE-KEY -c '{"replication-request": "host-info"}
    ```
    Where: 
    + `SECONDARY-INSTANCE` is name of the secondary service instance you created in step 2 of [Create a Leader-Follower Service Instance](#create-multi-dc), above. 
    + `SERVICE-KEY` is a name you choose for the service key. 
    
    
    
1. View the `replication-credentials` for your service key by running the following command:

    ```
    cf service-key SECONDARY-INSTANCE SERVICE-KEY
    ```
    Where: 
    + `SECONDARY-INSTANCE` is name of the secondary service instance you created in step 2 of [Create a Leader-Follower Service Instance](#create-multi-dc), above.
    + `SERVICE-KEY` is the name of the service key you created in step 1 above. 
    
    For example:
    
    <pre class="terminal">$ cf service-key secondary-node rep-key
      Getting key rep-key for service instance my-follower as user@example.com...

      {
        "replication-credentials": {
          "hostname": "secondary.bosh",
          "ip": "10.0.19.12",
          "uuid": "ab12cd34-5678-91e2-345f-67891h234567"
        }
      }</pre>
1. Record the output of the above command.
1. Log into the PCF deployment for your primary foundation by running the following command:

    ```
    cf login PRIMARY-API-URL
    ```
    Where `PRIMARY-API-URL` is the API endpoint for your primary foundation. 

1. Update your primary service instance with the secondary service key by running the 
following command:
    
    ```
    cf update-service PRIMARY-INSTANCE -c REPLICATION-CREDS
    ```
    Where:
    + `PRIMARY-INSTANCE` is name of the primary service instance you created in step 1 of [Create a Leader-Follower Service Instance](#create-multi-dc), above
    + `REPLICATION-CREDS` is the output you recorded in step 3 above. 
    
    For example:
    <pre class="terminal">cf update-service primary-node -c {"replication-credentials":{
      "hostname": "secondary.bosh",
      "ip": "10.0.18.12",
      "uuid": "ab12cd34-5678-91e2-345f-67891h234567"
      }
    }</pre>
1.  Create a service key for the service instance in your primary foundation by running the following command:

    ```
    cf create-service-key PRIMARY-INSTANCE SERVICE-KEY-NAME -c '{"replication-request": "credentials"}
    ```
    Where: 
    + `PRIMARY-INSTANCE` is name of the primary service instance you created in step 1 of [Create a Leader-Follower Service Instance](#create-multi-dc), above
    + `SERVICE-KEY-NAME` is a name you choose for the service key. 
1. View the `replication-credentials` for your service key by running the following command:

    ```
    cf service-key PRIMARY-INSTANCE SERVICE-KEY-NAME
    ```
    Where: 
    + `PRIMARY-INSTANCE` is name of the primary service instance you created in step 1 of [Create a Leader-Follower Service Instance](#create-multi-dc), above
    + `SERVICE-KEY-NAME` is the name of the primary service key you created in step 6 above. 
    
    For example:
    
    <pre class="terminal">$ cf service-key primary-node rep-key
      Getting key rep-key for service instance primary as user@example.com...

      {
        "replication-credentials": {
          "hostname": "primary.bosh",
          "ip": "10.0.17.12",
          "password": "a22aaa2a2a2aaaaa",
          "port": 3306,
          "username": "6bf07ae455a14064a9073cec8696366c",
          "uuid": "zy98xw76-5432-19v8-765u-43219t876543"
        }
      }</pre>
    
1. Record the output of the above command.
1. Log into the PCF deployment for your secondary foundation by running the following command:

    ```
    cf login SECONDARY-API-URL
    ```
    Where `SECONDARY-API-URL` is the API endpoint for your secondary foundation. 
    
1. Update your secondary service instance with the primary service key by running the following command:

    ```
    cf update-service SECONDARY-INSTANCE -c REPLICATION-CREDS
    ```
    Where:
    + `SECONDARY-INSTANCE` is name of the secondary service instance you created in step 2 of [Create a Leader-Follower Service Instance](#create-multi-dc), above.
    + `REPLICATION-CREDS` is the output you recorded in step 8 above. 
    
    For example:
    <pre class="terminal"> cf update-service secondary-node -c {"replication-credentials":{
      "hostname": "primary.bosh",
      "ip": "10.0.17.12",
      "password": "a22aaa2a2a2aaaaa",
      "port": 3306,
      "username": "6bf07ae455a14064a9073cec8696366c",
      "uuid": "zy98xw76-5432-19v8-765u-43219t876543"
      }
    }</pre>
    
